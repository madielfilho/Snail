-- S0 - equal
assert let 
	cycle_stm0_stm0 = 2
	id__ = 0
	
	
	
within
	stm0::D__(id__,cycle_stm0_stm0) [FD= Spec
assert Spec [FD= let 
	cycle_stm0_stm0 = 2
	id__ = 0
	
	
	
within
	stm0::D__(id__,cycle_stm0_stm0)

-- S1 - timed deadlock free
assert prioritise(let 
	cycle_stm0_stm0 = 1
	id__ = 0
	
	
	
within
	stm0::D__(id__,cycle_stm0_stm0)[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- S2 - not timelock free
assert not RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= let 
	cycle_stm0_stm0 = 1
	id__ = 0
	
	
	
within
	stm0::D__(id__,cycle_stm0_stm0)

-- C0 - equal
assert let 
	cycle_ctrl0_ctrl0 = 2
	id__ = 0
	
	
	
		
within
	ctrl0::D__(id__,cycle_ctrl0_ctrl0) [FD= CTSpec
assert CTSpec [FD= let 
	cycle_ctrl0_ctrl0 = 2
	id__ = 0
	
	
	
		
within
	ctrl0::D__(id__,cycle_ctrl0_ctrl0)

-- C1 - timed deadlock free
assert prioritise(let 
	cycle_ctrl0_ctrl0 = 1
	id__ = 0
	
	
	
		
within
	ctrl0::D__(id__,cycle_ctrl0_ctrl0)[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- C2 - not timelock free
assert not RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= let 
	cycle_ctrl0_ctrl0 = 1
	id__ = 0
	
	
	
		
within
	ctrl0::D__(id__,cycle_ctrl0_ctrl0)

-- RS2 - equal
assert let
	rename_in_stm0(stm0::i_x.x__) = SimSTM::i_x.x__
	rename_out_stm0(stm0::o_a) = SimSTM::o_a
	rename_out_stm0(stm0::o_b) = SimSTM::o_b
	rename_out_stm0(stm0::o_x.x__) = SimSTM::o_x.x__
within
	((let 
		cycle_stm0_stm0 = 1
		id__ = 0
		
		
		
	within
		stm0::D__(id__,cycle_stm0_stm0))\{|stm0::endexec|})
	[[ stm0::registerRead.x__ <- SimSTM::registerRead.rename_in_stm0(x__) | x__ <- stm0::RegisterDataInput ]]
	[[ stm0::registerWrite.x__ <- SimSTM::registerWrite.rename_out_stm0(x__) | x__ <- stm0::RegisterDataOutput ]]
 [FD= let 
	cycle_SimSTM_SimSTM = 1
	id__ = 0
	
	
	
within
	SimSTM::D__(id__,cycle_SimSTM_SimSTM)
assert let
	rename_out_SimSTM(SimSTM::o_b) = stm0::o_b
	rename_out_SimSTM(SimSTM::o_a) = stm0::o_a
within
	(let 
		cycle_SimSTM_SimSTM = 1
		id__ = 0
		
		
		
	within
		SimSTM::D__(id__,cycle_SimSTM_SimSTM))
	[[ SimSTM::registerWrite.x__ <- stm0::registerWrite.rename_out_SimSTM(x__) | x__ <- SimSTM::RegisterDataOutput ]]
 [FD= (let 
	cycle_stm0_stm0 = 1
	id__ = 0
	
	
	
within
	stm0::D__(id__,cycle_stm0_stm0))\{|stm0::endexec|}

include "defs/timed_definitions.csp"
include "defs/core_defs.csp"
include "../timed/defs/M.csp"
include "defs/sequence_toolkit_defs.csp"
include "defs/ctrl0.csp"
include "defs/stm0.csp"
include "defs/file_main_defs.csp"
include "defs/function_toolkit_defs.csp"
include "defs/robochart_defs.csp"
include "sims/defs/SimSTM_defs.csp"
include "defs/set_toolkit_defs.csp"
include "instantiations.csp"
include "../timed/defs/M_defs.csp"
include "defs/relation_toolkit_defs.csp"

channel r__

transparent chase
transparent wbisim

Spec = stm0::registerRead.stm0::i_In?b?d -> (if (b==true) then stm0::registerWrite.stm0::o_Out!d -> SKIP else SKIP) ; STM::endexec -> tock -> tock -> Spec

CTSpec = CT::registerRead.CT::i_In?b?d -> (if (b==true) then CT::registerWrite.CT::o_Out!d -> SKIP else SKIP) ; CT::endexec -> tock -> tock -> CTSpec

MSpec = Mod::registerRead.Mod::i_In?b?d -> (if (b==true) then Mod::registerWrite.Mod::o_Out!d -> SKIP else SKIP) ; tock -> tock -> MSpec
