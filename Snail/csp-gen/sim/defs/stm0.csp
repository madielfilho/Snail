module stm0
exports
	-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	external prioritise
	transparent wbisim

	-- flow channels
	channel internal__ : TIDS
	channel enteredV, enterV, exitV, exitedV : SIDS
	channel enter, entered: SIDS.SIDS
	channel exit,exited: SIDS.SIDS
	
	-- RoboSim channels
	channel endexec
	channel endexec__ : TIDS
	channel startexec
	channel terminate
	
	-- declaring registerRead/Write datatypes
	datatype RegisterDataInput = i_x.core_int
	
	
	datatype RegisterDataOutput = o_a
		| o_b
		| o_x.core_int
	
	
	channel registerRead 	: RegisterDataInput
	channel registerWrite 	: RegisterDataOutput
	
	-- variable channels
	channel get_exec_ds0, set_exec_ds0: core_boolean
	channel get_exec_ms0, set_exec_ms0: core_boolean
	channel get_active_ds0, set_active_ds0: core_boolean
	channel get_x, set_x: core_int
	
	-- local variable channels for defined operations that are required by the state machine
	
	-- declaring state machine events
	
	-- declaring call and ret events for undefined operations
	channel ops0_s2_WaitControllerCall, ops0_s2_WaitControllerRet
	channel ops0_s1_WaitControllerCall, ops0_s1_WaitControllerRet
	channel opWaitD0Call, opWaitD0Ret
	
	EndExecs = {| endexec__, endexec
	 |}
	
	Transitions = {| internal__
	 |}
	

	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machien module.
	CALL__ops0_s2_WaitController(id__) =  EDeadline(ops0_s2_WaitControllerCall,0)		
	CALL__ops0_s1_WaitController(id__) =  EDeadline(ops0_s1_WaitControllerCall,0)		
	CALL__opWaitD0(id__) =  EDeadline(opWaitD0Call,0)		
	
	
	-- definition of functions used to expose flow channels
	ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
					   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
					   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
					   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
						 
	ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
				[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
				[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
	
	-- declaring identifiers of state and final states
	datatype SIDS = SID_stm0
	              | SID_stm0_s0
	              | SID_stm0_s0_s1
	              | SID_stm0_s0_s2
	              | SID_stm0_s0_f0
	
	-- declaring identifiers of transitions
	datatype TIDS = NULLTRANSITION__
	              | TID_stm0_s0_t0
	              | TID_stm0_s0_t1
	              | TID_stm0_s0_t2
	              | TID_stm0_s0_t3
	              | TID_stm0_t0
	
	-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
	
	ITIDS = {
		TID_stm0_s0_t1,	TID_stm0_s0_t2,	TID_stm0_s0_t3
	}
	
	int_int = {|
		internal__.TID_stm0_s0_t1,
		internal__.TID_stm0_s0_t2,
		internal__.TID_stm0_s0_t3
	|}
		
	
	internal_events = {|enter,entered,exit,exited|}
	
	-- declaring all states
	CS_stm0_s0_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_stm0_s0},
		y____ <- {SID_stm0_s0}
	|}
	
	stm0_s0_int_int = {|
		internal__.TID_stm0_s0_t1,
		internal__.TID_stm0_s0_t2,
		internal__.TID_stm0_s0_t3
	|}
		
	
	stm0_s0_int_triggers = {|
		internal__.TID_stm0_s0_t0,
		internal__.TID_stm0_s0_t1,
		internal__.TID_stm0_s0_t2,
		internal__.TID_stm0_s0_t3
	|}
	
	State_stm0_s0_s1_R(id__) = 
		State_stm0_s0_s1(id__)
	 		[|diff(stm0_s0_int_int,stm0_s0_s1_triggers)|]
	 	SKIP
	 		
	State_stm0_s0_s2_R(id__) = 
		State_stm0_s0_s2(id__)
	 		[|diff(stm0_s0_int_int,stm0_s0_s2_triggers)|]
	 	SKIP
	 		
	State_stm0_s0_f0_R(id__) = 
		State_stm0_s0_f0(id__)
	 		[|diff(stm0_s0_int_int,stm0_s0_f0_triggers)|]
	 	SKIP
	 		
	State_stm0_s0(id__) = (
		State_stm0_s0_aux(id__)
			[|
				union(
					diff(int_int, stm0_s0_int_triggers),
					{|enter.x____.y____,
					  entered.x____.y____,
					  exit.x____.y____,
					  exited.x____.y____ |
					  x____ <- diff(SIDS,{SID_stm0_s0_s1,SID_stm0_s0_s2,SID_stm0_s0_f0}),
					  y____ <- {SID_stm0_s0_s1,SID_stm0_s0_s2,SID_stm0_s0_f0}
				    |}
				)
			|]
		(
			State_stm0_s0_s1_R(id__)
				[|inter(CS_stm0_s0_s1_sync,union(CS_stm0_s0_s2_sync,CS_stm0_s0_f0_sync))|]
			(
				State_stm0_s0_s2_R(id__)
					[|inter(CS_stm0_s0_s2_sync,CS_stm0_s0_f0_sync)|]
				State_stm0_s0_f0_R(id__)
			)
		)
	)
	
	stm0_s0_triggers = {|
		internal__.TID_stm0_s0_t1,
		internal__.TID_stm0_s0_t0,
		internal__.TID_stm0_s0_t3,
		internal__.TID_stm0_s0_t2
	|}
	
	State_stm0_s0_aux(id__) = let
		State_stm0_s0_aux_execute(id__,o____) = SKIP; 
		I_stm0_s0_i0(id__);
			entered!o____!SID_stm0_s0 ->
			(true&CALL__opWaitD0(
						id__
					); STOP /\ (
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_stm0_s0_t1,TID_stm0_s0_t0,TID_stm0_s0_t3,TID_stm0_s0_t2}) -> exit?y____:diff(SIDS,{SID_stm0_s0})!SID_stm0_s0 -> (
						exit!SID_stm0_s0?z____:{SID_stm0_s0_s1,SID_stm0_s0_s2,SID_stm0_s0_f0} -> exited!SID_stm0_s0!z____ -> 
								SKIP;
						SKIP;
						exited!y____!SID_stm0_s0 -> SKIP);
						State_stm0_s0_aux(id__)
			))
	within
		enter?x____:diff(SIDS,{SID_stm0_s0})!SID_stm0_s0 -> (State_stm0_s0_aux_execute(id__,x____))
	
	CS_stm0_s0_s1_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_stm0_s0_s1,SID_stm0_s0_s2,SID_stm0_s0_f0},
		y____ <- {SID_stm0_s0_s1}
	|}
	
	
	stm0_s0_s1_triggers = {|
		internal__.TID_stm0_s0_t1,
		internal__.TID_stm0_s0_t3,
		internal__.TID_stm0_s0_t2
	|}
	
	State_stm0_s0_s1(id__) = let
		T_stm0_s0_t1(id__) = internal__!TID_stm0_s0_t1 ->  exit.SID_stm0_s0_s1.SID_stm0_s0_s1 -> SKIP;
							SKIP;exited.SID_stm0_s0_s1.SID_stm0_s0_s1 -> SKIP;
							enter!SID_stm0_s0_s1!SID_stm0_s0_s2 -> entered!SID_stm0_s0_s1!SID_stm0_s0_s2 ->
							State_stm0_s0_s1(id__)
		State_stm0_s0_s1_execute(id__,o____) = true&CALL__ops0_s1_WaitController(
					id__
				); 
			entered!o____!SID_stm0_s0_s1 ->
			(SKIP; STOP /\ (
				T_stm0_s0_t1(id__)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_stm0_s0_t1,TID_stm0_s0_t3,TID_stm0_s0_t2}) -> exit?y____:diff(SIDS,{SID_stm0_s0_s1})!SID_stm0_s0_s1 -> (
						SKIP;
						exited!y____!SID_stm0_s0_s1 -> SKIP);
						State_stm0_s0_s1(id__)
			))
	within
		enter?x____:diff(SIDS,{SID_stm0_s0_s1})!SID_stm0_s0_s1 -> (State_stm0_s0_s1_execute(id__,x____))
	
	CS_stm0_s0_s2_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_stm0_s0_s1,SID_stm0_s0_s2,SID_stm0_s0_f0},
		y____ <- {SID_stm0_s0_s2}
	|}
	
	
	stm0_s0_s2_triggers = {|
		internal__.TID_stm0_s0_t1,
		internal__.TID_stm0_s0_t3,
		internal__.TID_stm0_s0_t2
	|}
	
	State_stm0_s0_s2(id__) = let
		T_stm0_s0_t2(id__) = internal__!TID_stm0_s0_t2 ->  exit.SID_stm0_s0_s2.SID_stm0_s0_s2 -> SKIP;
							SKIP;exited.SID_stm0_s0_s2.SID_stm0_s0_s2 -> SKIP;
							true&(registerWrite.o_b -> SKIP);enter!SID_stm0_s0_s2!SID_stm0_s0_s1 -> entered!SID_stm0_s0_s2!SID_stm0_s0_s1 ->
							State_stm0_s0_s2(id__)
		T_stm0_s0_t3(id__) = internal__!TID_stm0_s0_t3 ->  exit.SID_stm0_s0_s2.SID_stm0_s0_s2 -> SKIP;
							SKIP;exited.SID_stm0_s0_s2.SID_stm0_s0_s2 -> SKIP;
							true&(registerWrite.o_a -> SKIP);enter!SID_stm0_s0_s2!SID_stm0_s0_f0 -> entered!SID_stm0_s0_s2!SID_stm0_s0_f0 ->
							State_stm0_s0_s2(id__)
		State_stm0_s0_s2_execute(id__,o____) = true&CALL__ops0_s2_WaitController(
					id__
				); 
			entered!o____!SID_stm0_s0_s2 ->
			(SKIP; STOP /\ (
				T_stm0_s0_t2(id__)[]
				T_stm0_s0_t3(id__)
				[]
				internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_stm0_s0_t1,TID_stm0_s0_t3,TID_stm0_s0_t2}) -> exit?y____:diff(SIDS,{SID_stm0_s0_s2})!SID_stm0_s0_s2 -> (
						SKIP;
						exited!y____!SID_stm0_s0_s2 -> SKIP);
						State_stm0_s0_s2(id__)
			))
	within
		enter?x____:diff(SIDS,{SID_stm0_s0_s2})!SID_stm0_s0_s2 -> (State_stm0_s0_s2_execute(id__,x____))
	
	CS_stm0_s0_f0_sync = {|
		enter.y____.x____, 
		entered.y____.x____, 
		exit.y____.x____, 
		exited.y____.x____,
		enter.x____.y____, 
		entered.x____.y____, 
		exit.x____.y____, 
		exited.x____.y____ |
		x____ <- {SID_stm0_s0_s1,SID_stm0_s0_s2,SID_stm0_s0_f0},
		y____ <- {SID_stm0_s0_f0}
	|}
	
	
	stm0_s0_f0_triggers = {|
	|}
	
	State_stm0_s0_f0(id__) = let
		State_stm0_s0_f0_execute(id__,o____) = SKIP; 
			entered!o____!SID_stm0_s0_f0 ->
			(SKIP; STOP /\ (
				internal__?x____:diff(ITIDS,{NULLTRANSITION__}) -> exit?y____:diff(SIDS,{SID_stm0_s0_f0})!SID_stm0_s0_f0 -> (
						SKIP;
						exited!y____!SID_stm0_s0_f0 -> SKIP);
						State_stm0_s0_f0(id__)
			))
	within
		enter?x____:diff(SIDS,{SID_stm0_s0_f0})!SID_stm0_s0_f0 -> (State_stm0_s0_f0_execute(id__,x____))
	
	
	I_stm0_s0_i0(id__) = let
		T_stm0_s0_t0(id__) = internal__!TID_stm0_s0_t0 -> enter!SID_stm0_s0!SID_stm0_s0_s1 -> entered!SID_stm0_s0!SID_stm0_s0_s1 ->
		SKIP
	within
		T_stm0_s0_t0(id__)
	
	I_stm0_i0(id__) = let
		T_stm0_t0(id__) = internal__!TID_stm0_t0 -> enter!SID_stm0!SID_stm0_s0 -> entered!SID_stm0!SID_stm0_s0 ->
		SKIP
	within
		T_stm0_t0(id__)
	
	
	State_stm0_s0_R(id__) = 
		State_stm0_s0(id__)
			[|diff(int_int,stm0_s0_triggers)|]
		SKIP
			 		
		
	STM(id__) = 
		let
			Ending = endexec -> (startexec -> Ending [] terminate -> SKIP)
		within
			startexec -> 
				(
					(
						(
						I_stm0_i0(id__)
							[|
								{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
									x____ <- diff(SIDS,{SID_stm0_s0}),
									y____ <- {SID_stm0_s0}
							|}|]
						State_stm0_s0_R(id__)
						) [|{|terminate|}|> SKIP
					) \ {|terminate|}
				) ; Ending
	
	-- optimized memory process
	channel getV_exec_ds0: core_boolean
	channel getV_exec_ms0: core_boolean
	channel getV_active_ds0: core_boolean
	channel getV_x: core_int
	
	-- individual memory processes
	Memory_exec_ds0(x__) = ( 
		get_exec_ds0!x__ -> Memory_exec_ds0(x__)
		[]
		getV_exec_ds0!x__ -> Memory_exec_ds0(x__)
		[]
		set_exec_ds0?x__ -> Memory_exec_ds0(x__)
	)
	Memory_exec_ms0(x__) = ( 
		get_exec_ms0!x__ -> Memory_exec_ms0(x__)
		[]
		getV_exec_ms0!x__ -> Memory_exec_ms0(x__)
		[]
		set_exec_ms0?x__ -> Memory_exec_ms0(x__)
	)
	Memory_active_ds0(x__) = ( 
		get_active_ds0!x__ -> Memory_active_ds0(x__)
		[]
		getV_active_ds0!x__ -> Memory_active_ds0(x__)
		[]
		set_active_ds0?x__ -> Memory_active_ds0(x__)
	)
	Memory_x(x__) = ( 
		get_x!x__ -> Memory_x(x__)
		[]
		getV_x!x__ -> Memory_x(x__)
		[]
		registerRead.i_x?x__ -> Memory_x(x__)
		[]
		registerWrite.o_x?x__ -> Memory_x(x__)
	)
	
	-- processes that read variables and offer transitions
	MemoryTransitions(id__,
		exec_ds0,
		exec_ms0,
		active_ds0,
		x) = (
		startexec -> SKIP
	
		[]	internal__!TID_stm0_s0_t0 -> SKIP
		[]
		internal__!TID_stm0_s0_t1 -> SKIP
		[]
		((x>=1))&(internal__!TID_stm0_s0_t2 -> SKIP)
		[]
		((x==0))&(internal__!TID_stm0_s0_t3 -> SKIP)
		[]
		internal__!TID_stm0_t0 -> SKIP
	
	 	[]
	 	 	set_exec_ds0?x__ -> SKIP
	 	[]
	 	set_exec_ms0?x__ -> SKIP
	 	[]
	 	set_active_ds0?x__ -> SKIP
	
	 	[]
	 	 	registerWrite.o_x?x__ -> SKIP
	 			 			 	
	 	)
	MemoryTransitions_stm0(id__) =
		(
		getV_exec_ds0?exec_ds0 ->	
		getV_exec_ms0?exec_ms0 ->	
		getV_active_ds0?active_ds0 ->	
		getV_x?x ->
		 MemoryTransitions(id__,
		 	exec_ds0,
		 	exec_ms0,
		 	active_ds0,
		 	x);
		 MemoryTransitions_stm0(id__)
		)
	
	-- synchronisation, hiding and process sets 
	MemoryVariablesProcesses_stm0 = Union(
		{
			{
				Memory_exec_ds0(false),
				Memory_exec_ms0(false),
				Memory_active_ds0(true),
				Memory_x(0)
			}
		}
	)
	
	MemoryVariablesSyncSet = Union({
		{|
			set_exec_ds0,
			getV_exec_ms0,
			getV_x,
			getV_exec_ds0,
			set_exec_ms0,
			setWC,
			getV_active_ds0,
			set_active_ds0,
			registerWrite.o_x
		|}	
	})
	
	MemoryVariablesHideSet = Union({
		{|
			getV_exec_ms0,
			getV_x,
			getV_exec_ds0,
			getWC,
			getV_active_ds0
		|}
	})
	
	-- combined individual memory processes
	MemoryVariables = ||| P : MemoryVariablesProcesses_stm0 @ P
	
	-- complete memory process
	MemoryN(id__) = 
		(MemoryVariables 
		 [| MemoryVariablesSyncSet |] 
		 (	startexec -> wbisim(MemoryTransitions_stm0(id__))
		 	[| union({|startexec|},union(Transitions,diff(EndExecs,{endexec}))) |]
		 	-- The following process is an equivalent way to specify that between endexec
		 	-- and startexec no events in the set Transitions are available, thus preventing
		 	-- the state machine from performing transitions in between. Note that there is
		 	-- no synchronisation on the single 'endexec' event itself, because this only
		 	-- arises from an action, and the memory does not interfere with events in
		 	-- actions.
		 	(let
		 		TransitionController = startexec -> (RUN(Transitions) 
		 											 /\ ([] e : EndExecs @ e -> TransitionController))
		 	within 
		 		TransitionController)
		 	
		 	-- It isn't part of MemoryTransitions_ itself, because such a process would need
		 	-- to permit updates to setWC events, emanating from processes controlling clocks.
		 	-- Currently the MemoryTransitions_ process of a software operation called 
		 	-- within this state machine is copied into this process. So to incorporate the
		 	-- control below in such a process would require either:
		 	--
		 	-- (1) knowing about the clocks of every state machine that could call it, which
		 	-- 	   is not compositional;
		 	-- (2) not copying the process, but generating the transition choices explicitly.
		 	--
		 )
		) \ MemoryVariablesHideSet
	
	-- main process
	MachineMemorySyncSet = Union({
		union(
			union(
				{|get_exec_ds0,set_exec_ds0,
				get_exec_ms0,set_exec_ms0,
				get_active_ds0,set_active_ds0|},
				union({||},
					  {|get_x,registerWrite.o_x|}
					 )
			)
				
			,
			{|internal__.TID_stm0_s0_t0,
			internal__.TID_stm0_s0_t1,
			internal__.TID_stm0_s0_t2,
			internal__.TID_stm0_s0_t3,
			internal__.TID_stm0_t0|}
		),
		{|deadline|},
		WCresets
	})
	
	MachineMemoryHidingSet = Union({
		union(
			{|get_exec_ds0,set_exec_ds0,
			get_exec_ms0,set_exec_ms0,
			get_active_ds0,set_active_ds0|},
			union({||},
				  {|get_x|})
		)
		,
		{|deadline|}
	})
	
	MachineInternalEvents = {|
		internal__
	|}

	-- main process
	AUX(id__,cycle_stm0_stm0) =
		prioritise(
			(
		 		(
		 			cycle(cycle_stm0_stm0)
		 			[| {| endexec,endexec__
		 					,registerRead
		 					,registerWrite,startexec,terminate,tock |} |]
		 			(MemoryN(id__) 
		 	 		[| union(WCsets,WCsync) |] 
		 	 		Clocks(id__)
		 			)\WCsets
		 		)
		 		[| union(MachineMemorySyncSet,{| startexec,endexec,endexec__
		 										  |}) |]
		 		wbisim(STM(id__))
			)[[ endexec__.x____ <- endexec | x____ <- TIDS ]]
		\union(union(MachineMemoryHidingSet,MachineInternalEvents),{|startexec|})
		[|{|terminate|}|>SKIP
		,<{},{tock}>)
	
	internal_(id__,cycle_stm0_stm0) =
		prioritise(
					(
				 		(
				 			cycle(cycle_stm0_stm0)
				 			[| {| endexec,endexec__
				 					,registerRead
				 					,registerWrite,startexec,terminate,tock |} |]
				 			(MemoryN(id__) 
				 	 		[| union(WCsets,WCsync) |] 
				 	 		Clocks(id__)
				 			)\WCsets
				 		)
				 		[| union(MachineMemorySyncSet,{| startexec,endexec,endexec__
				 										  |}) |]
				 		wbisim(STM(id__))
					)[[ endexec__.x____ <- endexec | x____ <- TIDS ]]
				\union(MachineMemoryHidingSet,{|startexec|})
				[|{|terminate|}|>SKIP
				,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)
	
	

	datatype SOutputEvents = SOutput_a
		| SOutput_b
		| SOutput_x
	
	cycle(cycle_stm0_stm0) =
		let
			project(o_a) = SOutput_a
			project(o_b) = SOutput_b
			project(o_x.x__) = SOutput_x
	
			Cycle =
				(registerRead.i_x?x__ -> SKIP);
				startexec -> CollectOutputs(SOutputEvents);
				(wait(cycle_stm0_stm0) [] terminate -> SKIP);
				Cycle
			
			CollectOutputs(sout) =
				(registerWrite?outp:{ outp | outc <- inter(sout,SOutputEvents), outp <- RegisterDataOutput,project(outp) == outc} -> CollectOutputs(diff(sout,{project(outp)}))
				[]
				endexec -> SKIP
				[]
				endexec__?x__ -> SKIP
	)
		within
			Cycle

	Timed(OneStep) {
		-- declare clocks
		datatype ClockSet = dummyC
		channel clockReset 		-- no clocks declared
		
		-- declare trigger deadlines channel
		channel deadline : TIDS.Signal

		-- compile clocks process
		
		-- set of strings that uniquely identify the waiting conditions, each of which is 
		-- used to synchronise with the Memory process to set the correspoding variable in
		-- the memory process.
		datatype setWC_identifierSet = dummyWC
		
		-- declaring getWC and setWC channel for updating memory variables related to clocks
		channel setWC : setWC_identifierSet.Bool
		channel getWC : setWC_identifierSet.Bool
		
		-- Set of pairs capturing waiting condition processes and their alphabet.
		-- It includes the corresponding set of the defined operations.
		WCset(id__) = Union({
			{
			}
			})
		-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
		-- It includes the corresponding set of the defined operations.
		WCsync = Union({
			{||}
			})
		-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
		-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
		WCresets = Union({
			{| | x <- SIDS |}
			})
		-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
		WCsets = Union({
			{|setWC|}
			})
		
		
		
		-- Clocks process
		Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)

		-- collects all clockResets including those of operations
		ClockResets = Union({
			{|clockReset|}
					})

		-- With no internal events visible
		D__(id__,cycle_stm0_stm0) = timed_priority(AUX(id__,cycle_stm0_stm0) \ union(internal_events,ClockResets))

		O__(id__,cycle_stm0_stm0) = D__(id__,cycle_stm0_stm0)

		-- With enter/entered/exit/exited events visible
		FVS__(id__,cycle_stm0_stm0) = timed_priority(AUX(id__,cycle_stm0_stm0) \ ClockResets)

		-- With enterV/enteredV/exitV/exitedV events visible
		VS__(id__,cycle_stm0_stm0) = ShowV(timed_priority(AUX(id__,cycle_stm0_stm0) \ ClockResets))

		-- With clock resets visible
		FVS_C__(id__,cycle_stm0_stm0) = AUX(id__,cycle_stm0_stm0)
		}
endmodule
