module ctrl0
exports

	transparent diamond
	transparent sbisim
	transparent chase

	-- declaring channels
	-- allInputs = inputs_evars? true
	-- allOutputs = outputs_evars? false
	
	-- inputs, evars, rvars and outputs as calculated internally
	-- outputs = {
	--	(ctrl0::a,stm_ref0::a),
	--	(ctrl0::b,stm_ref0::b)
	--	 }
	-- inputs = {}
	-- evars = {}
	-- dvars = {
	--	(ctrl0::x,stm_ref0::x)
	--	 }
	
	-- declaring registerRead/Write datatypes
	datatype RegisterDataOutput = o_b
		| o_a
	
	
	channel registerWrite 	: RegisterDataOutput
	
	channel endexec, terminate
	
	
	-- declaring call and ret events for undefined operations
	
	
	module OP_opWaitD0
		
		-- declaring identifiers of state and final states
		datatype SIDS = SID_opWaitD0
		              | SID_opWaitD0_s0
		              | SID_opWaitD0_s2
		              | SID_opWaitD0_s3
		              | SID_opWaitD0_s1
		
		int_int = {|
			internal__.TID_opWaitD0_s0_to_f,
			internal__.TID_opWaitD0_s3_to_s3,
			internal__.TID_opWaitD0_t0,
			internal__.TID_opWaitD0_t1
		|}
			
		
		internal_events = {|enter,entered,exit,exited,terminate|}
		
		-- declaring all states
		CS_opWaitD0_s0_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_opWaitD0_s0,SID_opWaitD0_s2,SID_opWaitD0_s3,SID_opWaitD0_s1},
			y____ <- {SID_opWaitD0_s0}
		|}
		
		
		opWaitD0_s0_triggers = {|
			internal__.TID_opWaitD0_t1,
			internal__.TID_opWaitD0_t0,
			internal__.TID_opWaitD0_s0_to_f,
			internal__.TID_opWaitD0_s3_to_s3
		|}
		
		State_opWaitD0_s0(id__) = let
			T_opWaitD0_s0_to_f(id__) = internal__!TID_opWaitD0_s0_to_f ->  exit.SID_opWaitD0_s0.SID_opWaitD0_s0 -> SKIP;
								SKIP;exited.SID_opWaitD0_s0.SID_opWaitD0_s0 -> SKIP;
								true & (registerWrite!o_exec_ds0!true -> SKIP);enter!SID_opWaitD0_s0!SID_opWaitD0_s1 -> entered!SID_opWaitD0_s0!SID_opWaitD0_s1 ->
								State_opWaitD0_s0(id__)
			State_opWaitD0_s0_execute(id__,o____) = SKIP; 
				entered!o____!SID_opWaitD0_s0 ->
				(SKIP; STOP /\ (
					T_opWaitD0_s0_to_f(id__)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_opWaitD0_t1,TID_opWaitD0_t0,TID_opWaitD0_s0_to_f,TID_opWaitD0_s3_to_s3}) -> exit?y____:diff(SIDS,{SID_opWaitD0_s0})!SID_opWaitD0_s0 -> (
							SKIP;
							exited!y____!SID_opWaitD0_s0 -> SKIP);
							State_opWaitD0_s0(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_opWaitD0_s0})!SID_opWaitD0_s0 -> (State_opWaitD0_s0_execute(id__,x____))
		
		CS_opWaitD0_s2_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_opWaitD0_s0,SID_opWaitD0_s2,SID_opWaitD0_s3,SID_opWaitD0_s1},
			y____ <- {SID_opWaitD0_s2}
		|}
		
		
		opWaitD0_s2_triggers = {|
			internal__.TID_opWaitD0_t0,
			internal__.TID_opWaitD0_s3_to_s3
		|}
		
		State_opWaitD0_s2(id__) = let
			T_opWaitD0_s3_to_s3(id__) = internal__!TID_opWaitD0_s3_to_s3 ->  exit.SID_opWaitD0_s2.SID_opWaitD0_s2 -> SKIP;
								SKIP;exited.SID_opWaitD0_s2.SID_opWaitD0_s2 -> SKIP;
								true & (registerWrite!o_exec_ds0!true -> SKIP);enter!SID_opWaitD0_s2!SID_opWaitD0_s3 -> entered!SID_opWaitD0_s2!SID_opWaitD0_s3 ->
								State_opWaitD0_s2(id__)
			State_opWaitD0_s2_execute(id__,o____) = SKIP; 
				entered!o____!SID_opWaitD0_s2 ->
				(SKIP; STOP /\ (
					T_opWaitD0_s3_to_s3(id__)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_opWaitD0_t0,TID_opWaitD0_s3_to_s3}) -> exit?y____:diff(SIDS,{SID_opWaitD0_s2})!SID_opWaitD0_s2 -> (
							SKIP;
							exited!y____!SID_opWaitD0_s2 -> SKIP);
							State_opWaitD0_s2(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_opWaitD0_s2})!SID_opWaitD0_s2 -> (State_opWaitD0_s2_execute(id__,x____))
		
		CS_opWaitD0_s3_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_opWaitD0_s0,SID_opWaitD0_s2,SID_opWaitD0_s3,SID_opWaitD0_s1},
			y____ <- {SID_opWaitD0_s3}
		|}
		
		
		opWaitD0_s3_triggers = {|
			internal__.TID_opWaitD0_t0,
			internal__.TID_opWaitD0_s3_to_s3
		|}
		
		State_opWaitD0_s3(id__) = let
			T_opWaitD0_t0(id__) = internal__!TID_opWaitD0_t0 ->  exit.SID_opWaitD0_s3.SID_opWaitD0_s3 -> SKIP;
								SKIP;exited.SID_opWaitD0_s3.SID_opWaitD0_s3 -> SKIP;
								true & (registerWrite!o_exec_ms0!false -> SKIP);enter!SID_opWaitD0_s3!SID_opWaitD0_s2 -> entered!SID_opWaitD0_s3!SID_opWaitD0_s2 ->
								State_opWaitD0_s3(id__)
			State_opWaitD0_s3_execute(id__,o____) = SKIP; 
				entered!o____!SID_opWaitD0_s3 ->
				(SKIP; STOP /\ (
					T_opWaitD0_t0(id__)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_opWaitD0_t0,TID_opWaitD0_s3_to_s3}) -> exit?y____:diff(SIDS,{SID_opWaitD0_s3})!SID_opWaitD0_s3 -> (
							SKIP;
							exited!y____!SID_opWaitD0_s3 -> SKIP);
							State_opWaitD0_s3(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_opWaitD0_s3})!SID_opWaitD0_s3 -> (State_opWaitD0_s3_execute(id__,x____))
		
		CS_opWaitD0_s1_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_opWaitD0_s0,SID_opWaitD0_s2,SID_opWaitD0_s3,SID_opWaitD0_s1},
			y____ <- {SID_opWaitD0_s1}
		|}
		
		
		opWaitD0_s1_triggers = {|
			internal__.TID_opWaitD0_t1,
			internal__.TID_opWaitD0_t0,
			internal__.TID_opWaitD0_s3_to_s3
		|}
		
		State_opWaitD0_s1(id__) = let
			T_opWaitD0_t1(id__) = internal__!TID_opWaitD0_t1 ->  exit.SID_opWaitD0_s1.SID_opWaitD0_s1 -> SKIP;
								SKIP;exited.SID_opWaitD0_s1.SID_opWaitD0_s1 -> SKIP;
								get_x?x -> true & (registerWrite!o_x!Plus(x, 1, core_int) -> SKIP);true & (registerWrite!o_exec_ms0!false -> SKIP);enter!SID_opWaitD0_s1!SID_opWaitD0_s2 -> entered!SID_opWaitD0_s1!SID_opWaitD0_s2 ->
								State_opWaitD0_s1(id__)
			State_opWaitD0_s1_execute(id__,o____) = SKIP; 
				entered!o____!SID_opWaitD0_s1 ->
				(SKIP; STOP /\ (
					T_opWaitD0_t1(id__)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_opWaitD0_t1,TID_opWaitD0_t0,TID_opWaitD0_s3_to_s3}) -> exit?y____:diff(SIDS,{SID_opWaitD0_s1})!SID_opWaitD0_s1 -> (
							SKIP;
							exited!y____!SID_opWaitD0_s1 -> SKIP);
							State_opWaitD0_s1(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_opWaitD0_s1})!SID_opWaitD0_s1 -> (State_opWaitD0_s1_execute(id__,x____))
		
		
		I_opWaitD0_i0(id__) = let
			T_opWaitD0_i_to_s0(id__) = internal__!TID_opWaitD0_i_to_s0 -> enter!SID_opWaitD0!SID_opWaitD0_s0 -> entered!SID_opWaitD0!SID_opWaitD0_s0 ->
			SKIP
		within
			T_opWaitD0_i_to_s0(id__)
		
		
		State_opWaitD0_s0_R(id__) = 
			State_opWaitD0_s0(id__)
				[|diff(int_int,opWaitD0_s0_triggers)|]
			SKIP
				 		
		State_opWaitD0_s2_R(id__) = 
			State_opWaitD0_s2(id__)
				[|diff(int_int,opWaitD0_s2_triggers)|]
			SKIP
				 		
		State_opWaitD0_s3_R(id__) = 
			State_opWaitD0_s3(id__)
				[|diff(int_int,opWaitD0_s3_triggers)|]
			SKIP
				 		
		State_opWaitD0_s1_R(id__) = 
			State_opWaitD0_s1(id__)
				[|diff(int_int,opWaitD0_s1_triggers)|]
			SKIP
				 		
			
		STM(id__) = (
			I_opWaitD0_i0(id__)
				[|
					{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
						x____ <- diff(SIDS,{SID_opWaitD0_s0,SID_opWaitD0_s2,SID_opWaitD0_s3,SID_opWaitD0_s1}),
						y____ <- {SID_opWaitD0_s0,SID_opWaitD0_s2,SID_opWaitD0_s3,SID_opWaitD0_s1}
				|}|]
			(
				State_opWaitD0_s0_R(id__)
					[|inter(CS_opWaitD0_s0_sync,union(union(CS_opWaitD0_s2_sync,CS_opWaitD0_s3_sync),CS_opWaitD0_s1_sync))|]
				(
					State_opWaitD0_s2_R(id__)
						[|inter(CS_opWaitD0_s2_sync,union(CS_opWaitD0_s3_sync,CS_opWaitD0_s1_sync))|]
					(
						State_opWaitD0_s3_R(id__)
							[|inter(CS_opWaitD0_s3_sync,CS_opWaitD0_s1_sync)|]
						State_opWaitD0_s1_R(id__)
					)
				)
			)
		)
		
		-- main process
		AUX(id__) = STM(id__)[|{|terminate|}|>SKIP	
		
	exports
		
			-- the transition identifiers and memory transitions of an operation definition
			-- are exported here to allow for the renaming of the state machine to include
			-- the renaming of the events of the operation
			external prioritise
			transparent wbisim
			
			-- declaring identifiers of transitions
			datatype TIDS = NULLTRANSITION__
			              | TID_opWaitD0_i_to_s0
			              | TID_opWaitD0_s0_to_f
			              | TID_opWaitD0_s3_to_s3
			              | TID_opWaitD0_t0
			              | TID_opWaitD0_t1
			
			-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
			
			ITIDS = {
				TID_opWaitD0_s0_to_f,	TID_opWaitD0_s3_to_s3,	TID_opWaitD0_t0,	TID_opWaitD0_t1
			}
			
			-- flow channels
			channel internal__ : TIDS
			channel enteredV, enterV, exitV, exitedV : SIDS
			channel enter, entered: SIDS.SIDS
			channel exit,exited: SIDS.SIDS
			
			-- RoboSim channels
			channel endexec
			channel endexec__ : TIDS
			channel startexec
			channel terminate
			
			-- declaring registerRead/Write datatypes
			datatype RegisterDataInput = i_x.core_int
				| i_exec_ms0.core_boolean
				| i_active_ds0.core_boolean
				| i_exec_ds0.core_boolean
			
			
			datatype RegisterDataOutput = o_x.core_int
				| o_exec_ms0.core_boolean
				| o_active_ds0.core_boolean
				| o_exec_ds0.core_boolean
			
			
			channel registerRead 	: RegisterDataInput
			channel registerWrite 	: RegisterDataOutput
			
			-- variable channels
			channel get_x, set_x: core_int
			channel get_exec_ds0, set_exec_ds0: core_boolean
			channel get_exec_ms0, set_exec_ms0: core_boolean
			channel get_active_ds0, set_active_ds0: core_boolean
			
			-- local variable channels for defined operations that are required by the state machine
			
			-- declaring state machine events
			
			-- declaring call and ret events for undefined operations
			
			EndExecs = {| endexec__, endexec
			 |}
			
			Transitions = {| internal__
			 |}
			
			
			-- declare clocks
			datatype ClockSet = dummyC
			channel clockReset 		-- no clocks declared
				
			-- declare trigger deadlines channel
			channel deadline : TIDS.Signal
				
			-- compile clocks process
			Timed(OneStep) {
			
			-- set of strings that uniquely identify the waiting conditions, each of which is 
			-- used to synchronise with the Memory process to set the correspoding variable in
			-- the memory process.
			datatype setWC_identifierSet = dummyWC
			
			-- declaring getWC and setWC channel for updating memory variables related to clocks
			channel setWC : setWC_identifierSet.Bool
			channel getWC : setWC_identifierSet.Bool
			
			-- Set of pairs capturing waiting condition processes and their alphabet.
			-- It includes the corresponding set of the defined operations.
			WCset(id__) = Union({
				{
				}
				})
			-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
			-- It includes the corresponding set of the defined operations.
			WCsync = Union({
				{||}
				})
			-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
			-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
			WCresets = Union({
				{| | x <- SIDS |}
				})
			-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
			WCsets = Union({
				{|setWC|}
				})
			
			
			
			-- Clocks process
			Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
			}
			
			-- collects all clockResets
			ClockResets = {|clockReset|}
			
																			
			
			-- processes that read variables and offer transitions
			MemoryTransitions(id__,
				active_ds0,
				exec_ms0,
				x,
				exec_ds0) = (
			internal__!TID_opWaitD0_i_to_s0 -> SKIP
			[]
			internal__!TID_opWaitD0_s0_to_f -> SKIP
			[]
			internal__!TID_opWaitD0_s3_to_s3 -> SKIP
			[]
			((exec_ms0==true))&(internal__!TID_opWaitD0_t0 -> SKIP)
			[]
			((exec_ms0==true))&(internal__!TID_opWaitD0_t1 -> SKIP)
			 			 			 	
			 	)
			MemoryTransitions_opWaitD0(id__) =
				(
				OP_opWaitD0::getV_active_ds0?active_ds0 ->	
				OP_opWaitD0::getV_exec_ms0?exec_ms0 ->	
				OP_opWaitD0::getV_x?x ->	
				OP_opWaitD0::getV_exec_ds0?exec_ds0 ->
				 MemoryTransitions(id__,
				 	active_ds0,
				 	exec_ms0,
				 	x,
				 	exec_ds0);
				 MemoryTransitions_opWaitD0(id__)
				)
			
			-- synchronisation, hiding and process sets 
	
			
			MemoryVariablesProcesses_opWaitD0 = Union(
				{
					{
					}
				}
			)
			
			MemoryVariablesSyncSet = Union({
				{|
					setWC
				|}	
			})
			
			MemoryVariablesHideSet = Union({
				{|
					getWC
				|}
			})
			MachineMemorySyncSet = Union({
				union(
					union(
						{||},
						union({||},
							  {||}
							 )
					)
						
					,
					{|internal__.TID_opWaitD0_i_to_s0,
					internal__.TID_opWaitD0_s0_to_f,
					internal__.TID_opWaitD0_s3_to_s3,
					internal__.TID_opWaitD0_t0,
					internal__.TID_opWaitD0_t1|}
				),
				{|deadline|},
				WCresets
			})
			
			MachineMemoryHidingSet = Union({
				union(
					{||},
					union({||},
						  {||})
				)
				,
				{|deadline|}
			})
			
			MachineInternalEvents = {|
				internal__
			|}
	
			-- individual memory processes
	
			-- combined individual memory processes
			MemoryVariables = ||| P : MemoryVariablesProcesses_opWaitD0 @ P
		
			-- definition of the behaviour of state machines (default and optimised)
			D__(id__) = AUX(id__) \ internal_events
			O__(id__) = D__(id__)
	endmodule
	module OP_ops0_s1_WaitController
		
		-- declaring identifiers of state and final states
		datatype SIDS = SID_ops0_s1_WaitController
		              | SID_ops0_s1_WaitController_s0
		              | SID_ops0_s1_WaitController_f0
		
		int_int = {|
			internal__.TID_ops0_s1_WaitController_t1
		|}
			
		
		internal_events = {|enter,entered,exit,exited,terminate|}
		
		-- declaring all states
		CS_ops0_s1_WaitController_s0_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_ops0_s1_WaitController_s0,SID_ops0_s1_WaitController_f0},
			y____ <- {SID_ops0_s1_WaitController_s0}
		|}
		
		
		ops0_s1_WaitController_s0_triggers = {|
			internal__.TID_ops0_s1_WaitController_t1
		|}
		
		State_ops0_s1_WaitController_s0(id__) = let
			T_ops0_s1_WaitController_t1(id__) = internal__!TID_ops0_s1_WaitController_t1 ->  exit.SID_ops0_s1_WaitController_s0.SID_ops0_s1_WaitController_s0 -> SKIP;
								SKIP;exited.SID_ops0_s1_WaitController_s0.SID_ops0_s1_WaitController_s0 -> SKIP;
								true & (registerWrite!o_active_ds0!false -> SKIP);endexec -> startexec -> SKIP;get_exec_ds0?exec_ds0 -> true&(if exec_ds0 then (true & (registerWrite!o_exec_ds0!false -> SKIP);true & (registerWrite!o_exec_ms0!true -> SKIP))else SKIP);enter!SID_ops0_s1_WaitController_s0!SID_ops0_s1_WaitController_f0 -> entered!SID_ops0_s1_WaitController_s0!SID_ops0_s1_WaitController_f0 ->
								State_ops0_s1_WaitController_s0(id__)
			State_ops0_s1_WaitController_s0_execute(id__,o____) = SKIP; 
				entered!o____!SID_ops0_s1_WaitController_s0 ->
				(SKIP; STOP /\ (
					T_ops0_s1_WaitController_t1(id__)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_ops0_s1_WaitController_t1}) -> exit?y____:diff(SIDS,{SID_ops0_s1_WaitController_s0})!SID_ops0_s1_WaitController_s0 -> (
							SKIP;
							exited!y____!SID_ops0_s1_WaitController_s0 -> SKIP);
							State_ops0_s1_WaitController_s0(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_ops0_s1_WaitController_s0})!SID_ops0_s1_WaitController_s0 -> (State_ops0_s1_WaitController_s0_execute(id__,x____))
		
		CS_ops0_s1_WaitController_f0_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_ops0_s1_WaitController_s0,SID_ops0_s1_WaitController_f0},
			y____ <- {SID_ops0_s1_WaitController_f0}
		|}
		
		
		ops0_s1_WaitController_f0_triggers = {|
		|}
		
		State_ops0_s1_WaitController_f0(id__) = let
			State_ops0_s1_WaitController_f0_execute(id__,o____) = SKIP; 
				entered!o____!SID_ops0_s1_WaitController_f0 ->
				terminate -> SKIP
		within
			enter?x____:diff(SIDS,{SID_ops0_s1_WaitController_f0})!SID_ops0_s1_WaitController_f0 -> (State_ops0_s1_WaitController_f0_execute(id__,x____))
		
		
		I_ops0_s1_WaitController_i0(id__) = let
			T_ops0_s1_WaitController_i_to_s0(id__) = internal__!TID_ops0_s1_WaitController_i_to_s0 -> enter!SID_ops0_s1_WaitController!SID_ops0_s1_WaitController_s0 -> entered!SID_ops0_s1_WaitController!SID_ops0_s1_WaitController_s0 ->
			SKIP
		within
			T_ops0_s1_WaitController_i_to_s0(id__)
		
		
		State_ops0_s1_WaitController_s0_R(id__) = 
			State_ops0_s1_WaitController_s0(id__)
				[|diff(int_int,ops0_s1_WaitController_s0_triggers)|]
			SKIP
				 		
		State_ops0_s1_WaitController_f0_R(id__) = 
			State_ops0_s1_WaitController_f0(id__)
				[|diff(int_int,ops0_s1_WaitController_f0_triggers)|]
			SKIP
				 		
			
		STM(id__) = (
			I_ops0_s1_WaitController_i0(id__)
				[|
					{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
						x____ <- diff(SIDS,{SID_ops0_s1_WaitController_s0,SID_ops0_s1_WaitController_f0}),
						y____ <- {SID_ops0_s1_WaitController_s0,SID_ops0_s1_WaitController_f0}
				|}|]
			(
				State_ops0_s1_WaitController_s0_R(id__)
					[|inter(CS_ops0_s1_WaitController_s0_sync,CS_ops0_s1_WaitController_f0_sync)|]
				State_ops0_s1_WaitController_f0_R(id__)
			)
		)
		
		-- main process
		AUX(id__) = STM(id__)[|{|terminate|}|>SKIP	
		
	exports
		
			-- the transition identifiers and memory transitions of an operation definition
			-- are exported here to allow for the renaming of the state machine to include
			-- the renaming of the events of the operation
			external prioritise
			transparent wbisim
			
			-- declaring identifiers of transitions
			datatype TIDS = NULLTRANSITION__
			              | TID_ops0_s1_WaitController_i_to_s0
			              | TID_ops0_s1_WaitController_t1
			
			-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
			
			ITIDS = {
				TID_ops0_s1_WaitController_t1
			}
			
			-- flow channels
			channel internal__ : TIDS
			channel enteredV, enterV, exitV, exitedV : SIDS
			channel enter, entered: SIDS.SIDS
			channel exit,exited: SIDS.SIDS
			
			-- RoboSim channels
			channel endexec
			channel endexec__ : TIDS
			channel startexec
			channel terminate
			
			-- declaring registerRead/Write datatypes
			datatype RegisterDataInput = i_active_ds0.core_boolean
				| i_exec_ds0.core_boolean
				| i_exec_ms0.core_boolean
			
			
			datatype RegisterDataOutput = o_active_ds0.core_boolean
				| o_exec_ds0.core_boolean
				| o_exec_ms0.core_boolean
			
			
			channel registerRead 	: RegisterDataInput
			channel registerWrite 	: RegisterDataOutput
			
			-- variable channels
			channel get_x, set_x: core_int
			channel get_exec_ds0, set_exec_ds0: core_boolean
			channel get_exec_ms0, set_exec_ms0: core_boolean
			channel get_active_ds0, set_active_ds0: core_boolean
			
			-- local variable channels for defined operations that are required by the state machine
			
			-- declaring state machine events
			
			-- declaring call and ret events for undefined operations
			
			EndExecs = {| endexec__, endexec
			 |}
			
			Transitions = {| internal__
			 |}
			
			
			-- declare clocks
			datatype ClockSet = dummyC
			channel clockReset 		-- no clocks declared
				
			-- declare trigger deadlines channel
			channel deadline : TIDS.Signal
				
			-- compile clocks process
			Timed(OneStep) {
			
			-- set of strings that uniquely identify the waiting conditions, each of which is 
			-- used to synchronise with the Memory process to set the correspoding variable in
			-- the memory process.
			datatype setWC_identifierSet = dummyWC
			
			-- declaring getWC and setWC channel for updating memory variables related to clocks
			channel setWC : setWC_identifierSet.Bool
			channel getWC : setWC_identifierSet.Bool
			
			-- Set of pairs capturing waiting condition processes and their alphabet.
			-- It includes the corresponding set of the defined operations.
			WCset(id__) = Union({
				{
				}
				})
			-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
			-- It includes the corresponding set of the defined operations.
			WCsync = Union({
				{||}
				})
			-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
			-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
			WCresets = Union({
				{| | x <- SIDS |}
				})
			-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
			WCsets = Union({
				{|setWC|}
				})
			
			
			
			-- Clocks process
			Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
			}
			
			-- collects all clockResets
			ClockResets = {|clockReset|}
			
																			
			channel getV_x: core_int
			
			-- processes that read variables and offer transitions
			MemoryTransitions(id__,
				x,
				active_ds0,
				exec_ms0,
				exec_ds0) = (
			internal__!TID_ops0_s1_WaitController_i_to_s0 -> SKIP
			[]
			((active_ds0 or exec_ds0))&(internal__!TID_ops0_s1_WaitController_t1 -> SKIP)
			
			 	[]
			 	 	set_x?x__ -> SKIP
			 			 			 	
			 	)
			MemoryTransitions_ops0_s1_WaitController(id__) =
				(
				OP_ops0_s1_WaitController::getV_x?x ->	
				OP_ops0_s1_WaitController::getV_active_ds0?active_ds0 ->	
				OP_ops0_s1_WaitController::getV_exec_ms0?exec_ms0 ->	
				OP_ops0_s1_WaitController::getV_exec_ds0?exec_ds0 ->
				 MemoryTransitions(id__,
				 	x,
				 	active_ds0,
				 	exec_ms0,
				 	exec_ds0);
				 MemoryTransitions_ops0_s1_WaitController(id__)
				)
			
			-- synchronisation, hiding and process sets 
	
			
			MemoryVariablesProcesses_ops0_s1_WaitController = Union(
				{
					{
						Memory_x(0)
					}
				}
			)
			
			MemoryVariablesSyncSet = Union({
				{|
					getV_x,
					setWC,
					set_x
				|}	
			})
			
			MemoryVariablesHideSet = Union({
				{|
					getV_x,
					getWC
				|}
			})
			MachineMemorySyncSet = Union({
				union(
					union(
						{|get_x,set_x|},
						union({||},
							  {||}
							 )
					)
						
					,
					{|internal__.TID_ops0_s1_WaitController_i_to_s0,
					internal__.TID_ops0_s1_WaitController_t1|}
				),
				{|deadline|},
				WCresets
			})
			
			MachineMemoryHidingSet = Union({
				union(
					{|get_x,set_x|},
					union({||},
						  {||})
				)
				,
				{|deadline|}
			})
			
			MachineInternalEvents = {|
				internal__
			|}
	
			-- individual memory processes
			Memory_x(x__) = ( 
				get_x!x__ -> Memory_x(x__)
				[]
				getV_x!x__ -> Memory_x(x__)
				[]
				set_x?x__ -> Memory_x(x__)
			)
	
			-- combined individual memory processes
			MemoryVariables = ||| P : MemoryVariablesProcesses_ops0_s1_WaitController @ P
		
			-- definition of the behaviour of state machines (default and optimised)
			D__(id__) = AUX(id__) \ internal_events
			O__(id__) = D__(id__)
	endmodule
	module OP_ops0_s2_WaitController
		
		-- declaring identifiers of state and final states
		datatype SIDS = SID_ops0_s2_WaitController
		              | SID_ops0_s2_WaitController_s0
		              | SID_ops0_s2_WaitController_f0
		
		int_int = {|
			internal__.TID_ops0_s2_WaitController_t0
		|}
			
		
		internal_events = {|enter,entered,exit,exited,terminate|}
		
		-- declaring all states
		CS_ops0_s2_WaitController_s0_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_ops0_s2_WaitController_s0,SID_ops0_s2_WaitController_f0},
			y____ <- {SID_ops0_s2_WaitController_s0}
		|}
		
		
		ops0_s2_WaitController_s0_triggers = {|
			internal__.TID_ops0_s2_WaitController_t0
		|}
		
		State_ops0_s2_WaitController_s0(id__) = let
			T_ops0_s2_WaitController_t0(id__) = internal__!TID_ops0_s2_WaitController_t0 ->  exit.SID_ops0_s2_WaitController_s0.SID_ops0_s2_WaitController_s0 -> SKIP;
								SKIP;exited.SID_ops0_s2_WaitController_s0.SID_ops0_s2_WaitController_s0 -> SKIP;
								endexec -> startexec -> SKIP;get_exec_ds0?exec_ds0 -> true&(if exec_ds0 then (true & (registerWrite!o_exec_ds0!false -> SKIP);true & (registerWrite!o_exec_ms0!true -> SKIP))else SKIP);enter!SID_ops0_s2_WaitController_s0!SID_ops0_s2_WaitController_f0 -> entered!SID_ops0_s2_WaitController_s0!SID_ops0_s2_WaitController_f0 ->
								State_ops0_s2_WaitController_s0(id__)
			State_ops0_s2_WaitController_s0_execute(id__,o____) = SKIP; 
				entered!o____!SID_ops0_s2_WaitController_s0 ->
				(SKIP; STOP /\ (
					T_ops0_s2_WaitController_t0(id__)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_ops0_s2_WaitController_t0}) -> exit?y____:diff(SIDS,{SID_ops0_s2_WaitController_s0})!SID_ops0_s2_WaitController_s0 -> (
							SKIP;
							exited!y____!SID_ops0_s2_WaitController_s0 -> SKIP);
							State_ops0_s2_WaitController_s0(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_ops0_s2_WaitController_s0})!SID_ops0_s2_WaitController_s0 -> (State_ops0_s2_WaitController_s0_execute(id__,x____))
		
		CS_ops0_s2_WaitController_f0_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_ops0_s2_WaitController_s0,SID_ops0_s2_WaitController_f0},
			y____ <- {SID_ops0_s2_WaitController_f0}
		|}
		
		
		ops0_s2_WaitController_f0_triggers = {|
		|}
		
		State_ops0_s2_WaitController_f0(id__) = let
			State_ops0_s2_WaitController_f0_execute(id__,o____) = SKIP; 
				entered!o____!SID_ops0_s2_WaitController_f0 ->
				terminate -> SKIP
		within
			enter?x____:diff(SIDS,{SID_ops0_s2_WaitController_f0})!SID_ops0_s2_WaitController_f0 -> (State_ops0_s2_WaitController_f0_execute(id__,x____))
		
		
		I_ops0_s2_WaitController_i0(id__) = let
			T_ops0_s2_WaitController_i_to_s0(id__) = internal__!TID_ops0_s2_WaitController_i_to_s0 -> enter!SID_ops0_s2_WaitController!SID_ops0_s2_WaitController_s0 -> entered!SID_ops0_s2_WaitController!SID_ops0_s2_WaitController_s0 ->
			SKIP
		within
			T_ops0_s2_WaitController_i_to_s0(id__)
		
		
		State_ops0_s2_WaitController_s0_R(id__) = 
			State_ops0_s2_WaitController_s0(id__)
				[|diff(int_int,ops0_s2_WaitController_s0_triggers)|]
			SKIP
				 		
		State_ops0_s2_WaitController_f0_R(id__) = 
			State_ops0_s2_WaitController_f0(id__)
				[|diff(int_int,ops0_s2_WaitController_f0_triggers)|]
			SKIP
				 		
			
		STM(id__) = (
			I_ops0_s2_WaitController_i0(id__)
				[|
					{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
						x____ <- diff(SIDS,{SID_ops0_s2_WaitController_s0,SID_ops0_s2_WaitController_f0}),
						y____ <- {SID_ops0_s2_WaitController_s0,SID_ops0_s2_WaitController_f0}
				|}|]
			(
				State_ops0_s2_WaitController_s0_R(id__)
					[|inter(CS_ops0_s2_WaitController_s0_sync,CS_ops0_s2_WaitController_f0_sync)|]
				State_ops0_s2_WaitController_f0_R(id__)
			)
		)
		
		-- main process
		AUX(id__) = STM(id__)[|{|terminate|}|>SKIP	
		
	exports
		
			-- the transition identifiers and memory transitions of an operation definition
			-- are exported here to allow for the renaming of the state machine to include
			-- the renaming of the events of the operation
			external prioritise
			transparent wbisim
			
			-- declaring identifiers of transitions
			datatype TIDS = NULLTRANSITION__
			              | TID_ops0_s2_WaitController_i_to_s0
			              | TID_ops0_s2_WaitController_t0
			
			-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
			
			ITIDS = {
				TID_ops0_s2_WaitController_t0
			}
			
			-- flow channels
			channel internal__ : TIDS
			channel enteredV, enterV, exitV, exitedV : SIDS
			channel enter, entered: SIDS.SIDS
			channel exit,exited: SIDS.SIDS
			
			-- RoboSim channels
			channel endexec
			channel endexec__ : TIDS
			channel startexec
			channel terminate
			
			-- declaring registerRead/Write datatypes
			datatype RegisterDataInput = i_exec_ds0.core_boolean
				| i_exec_ms0.core_boolean
				| i_active_ds0.core_boolean
			
			
			datatype RegisterDataOutput = o_exec_ds0.core_boolean
				| o_exec_ms0.core_boolean
				| o_active_ds0.core_boolean
			
			
			channel registerRead 	: RegisterDataInput
			channel registerWrite 	: RegisterDataOutput
			
			-- variable channels
			channel get_x, set_x: core_int
			channel get_exec_ds0, set_exec_ds0: core_boolean
			channel get_exec_ms0, set_exec_ms0: core_boolean
			channel get_active_ds0, set_active_ds0: core_boolean
			
			-- local variable channels for defined operations that are required by the state machine
			
			-- declaring state machine events
			
			-- declaring call and ret events for undefined operations
			
			EndExecs = {| endexec__, endexec
			 |}
			
			Transitions = {| internal__
			 |}
			
			
			-- declare clocks
			datatype ClockSet = dummyC
			channel clockReset 		-- no clocks declared
				
			-- declare trigger deadlines channel
			channel deadline : TIDS.Signal
				
			-- compile clocks process
			Timed(OneStep) {
			
			-- set of strings that uniquely identify the waiting conditions, each of which is 
			-- used to synchronise with the Memory process to set the correspoding variable in
			-- the memory process.
			datatype setWC_identifierSet = dummyWC
			
			-- declaring getWC and setWC channel for updating memory variables related to clocks
			channel setWC : setWC_identifierSet.Bool
			channel getWC : setWC_identifierSet.Bool
			
			-- Set of pairs capturing waiting condition processes and their alphabet.
			-- It includes the corresponding set of the defined operations.
			WCset(id__) = Union({
				{
				}
				})
			-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
			-- It includes the corresponding set of the defined operations.
			WCsync = Union({
				{||}
				})
			-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
			-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
			WCresets = Union({
				{| | x <- SIDS |}
				})
			-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
			WCsets = Union({
				{|setWC|}
				})
			
			
			
			-- Clocks process
			Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
			}
			
			-- collects all clockResets
			ClockResets = {|clockReset|}
			
																			
			channel getV_x: core_int
			
			-- processes that read variables and offer transitions
			MemoryTransitions(id__,
				x,
				active_ds0,
				exec_ms0,
				exec_ds0) = (
			internal__!TID_ops0_s2_WaitController_i_to_s0 -> SKIP
			[]
			((active_ds0 or exec_ds0))&(internal__!TID_ops0_s2_WaitController_t0 -> SKIP)
			
			 	[]
			 	 	set_x?x__ -> SKIP
			 			 			 	
			 	)
			MemoryTransitions_ops0_s2_WaitController(id__) =
				(
				OP_ops0_s2_WaitController::getV_x?x ->	
				OP_ops0_s2_WaitController::getV_active_ds0?active_ds0 ->	
				OP_ops0_s2_WaitController::getV_exec_ms0?exec_ms0 ->	
				OP_ops0_s2_WaitController::getV_exec_ds0?exec_ds0 ->
				 MemoryTransitions(id__,
				 	x,
				 	active_ds0,
				 	exec_ms0,
				 	exec_ds0);
				 MemoryTransitions_ops0_s2_WaitController(id__)
				)
			
			-- synchronisation, hiding and process sets 
	
			
			MemoryVariablesProcesses_ops0_s2_WaitController = Union(
				{
					{
						Memory_x(0)
					}
				}
			)
			
			MemoryVariablesSyncSet = Union({
				{|
					getV_x,
					setWC,
					set_x
				|}	
			})
			
			MemoryVariablesHideSet = Union({
				{|
					getV_x,
					getWC
				|}
			})
			MachineMemorySyncSet = Union({
				union(
					union(
						{|get_x,set_x|},
						union({||},
							  {||}
							 )
					)
						
					,
					{|internal__.TID_ops0_s2_WaitController_i_to_s0,
					internal__.TID_ops0_s2_WaitController_t0|}
				),
				{|deadline|},
				WCresets
			})
			
			MachineMemoryHidingSet = Union({
				union(
					{|get_x,set_x|},
					union({||},
						  {||})
				)
				,
				{|deadline|}
			})
			
			MachineInternalEvents = {|
				internal__
			|}
	
			-- individual memory processes
			Memory_x(x__) = ( 
				get_x!x__ -> Memory_x(x__)
				[]
				getV_x!x__ -> Memory_x(x__)
				[]
				set_x?x__ -> Memory_x(x__)
			)
	
			-- combined individual memory processes
			MemoryVariables = ||| P : MemoryVariablesProcesses_ops0_s2_WaitController @ P
		
			-- definition of the behaviour of state machines (default and optimised)
			D__(id__) = AUX(id__) \ internal_events
			O__(id__) = D__(id__)
	endmodule
	
	-- (Rule 8) cycleController(...) : CSPProcess
	datatype SOutputEvents = SOutput_a
		| SOutput_b
		| SOutput_x
	
	nametype DVarsEvents = {|SOutput_x|}	
	
	cycleController(id__,cycle_ctrl0_ctrl0) =
	let
				
		project_stm_ref0(stm_ref0::o_a) = SOutput_a
		project_stm_ref0(stm_ref0::o_b) = SOutput_b
		project_stm_ref0(stm_ref0::o_x.x__) = SOutput_x
	
		connected_stm_ref0(stm_ref0::o_a) = true
		connected_stm_ref0(stm_ref0::o_b) = true
		connected_stm_ref0(stm_ref0::o_x.x__) = true
		connected_stm_ref0(_) = false
	
		lift_stm_ref0(stm_ref0::o_a) = o_a
		lift_stm_ref0(stm_ref0::o_b) = o_b
		
		CycleController =
			-- read inputs from the controller and pass to state machines
			-- synchronize on events related to evars
			-- collect outputs, and monitor termination of the cycle, by all controllers
			(CollectOutputs(SOutputEvents) [| {endexec} |] Monitor);
			-- wait for the cycleDef period
			wait(cycle_ctrl0_ctrl0);
			-- recurse
			CycleController
			
									
		CollectOutputs(sout) =
			(stm_ref0::registerWrite?outp:{ outp | outc <- diff(sout,DVarsEvents), outp <- stm_ref0::RegisterDataOutput, connected_stm_ref0(outp), project_stm_ref0(outp) == outc}
					-> registerWrite!lift_stm_ref0(outp)
						-> CollectOutputs(diff(sout,{project_stm_ref0(outp)}))
			[]
			stm_ref0::registerWrite?outp:{ outp | outc <- inter(sout,DVarsEvents), outp <- stm_ref0::RegisterDataOutput, connected_stm_ref0(outp), project_stm_ref0(outp) == outc}
					-> CollectOutputs(diff(sout,{project_stm_ref0(outp)}))
			[]
			endexec -> SKIP
			)
	
		Monitor = 
			(	 (stm_ref0::endexec -> SKIP)); endexec -> SKIP
	within
		CycleController
	
	-- (Rule 5) memoryComp(...) : CSPProcess
	memoryComp(id__) = (
		Memory_x(0)
		)
	
	Memory_x(x__) = (
		stm_ref0::registerWrite.stm_ref0::o_x?x__ -> Memory_x(x__)
		[]
		stm_ref0::registerRead.stm_ref0::i_x!x__ -> Memory_x(x__)
	)
	
	module stm_ref0
	exports
		-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		external prioritise
		transparent wbisim
	
		-- flow channels
		channel internal__ : TIDS
		channel enteredV, enterV, exitV, exitedV : SIDS
		channel enter, entered: SIDS.SIDS
		channel exit,exited: SIDS.SIDS
		
		-- RoboSim channels
		channel endexec
		channel endexec__ : TIDS
		channel startexec
		channel terminate
		
		-- declaring registerRead/Write datatypes
		datatype RegisterDataInput = i_x.core_int
		
		
		datatype RegisterDataOutput = o_a
			| o_b
			| o_x.core_int
		
		
		channel registerRead 	: RegisterDataInput
		channel registerWrite 	: RegisterDataOutput
		
		-- variable channels
		channel get_exec_ds0, set_exec_ds0: core_boolean
		channel get_exec_ms0, set_exec_ms0: core_boolean
		channel get_active_ds0, set_active_ds0: core_boolean
		channel get_x, set_x: core_int
		
		-- local variable channels for defined operations that are required by the state machine
		channel get_ops0_s2_WaitController_x, set_ops0_s2_WaitController_x: core_int
		channel get_ops0_s1_WaitController_x, set_ops0_s1_WaitController_x: core_int
		
		-- declaring state machine events
		
		-- declaring call and ret events for undefined operations
		
		EndExecs = {| endexec__, endexec
					  ,OP_ops0_s2_WaitController::endexec__, OP_ops0_s2_WaitController::endexec
					  			  ,OP_opWaitD0::endexec__, OP_opWaitD0::endexec
					  			  ,OP_ops0_s1_WaitController::endexec__, OP_ops0_s1_WaitController::endexec
					   |}
		
		Transitions = {| internal__
						 ,OP_ops0_s2_WaitController::internal__
						 				 ,OP_opWaitD0::internal__
						 				 ,OP_ops0_s1_WaitController::internal__
						  |}
		
	
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machien module.
		
		CALL__ops0_s2_WaitController(id__) = (OP_ops0_s2_WaitController::O__(id__))
		[[ OP_ops0_s2_WaitController::registerRead.x___ <- OP_ops0_s2_WaitController_registerRead(OP_ops0_s2_WaitController::registerRead.x___) | x___ <- OP_ops0_s2_WaitController::RegisterDataInput ]]
		[[ OP_ops0_s2_WaitController::registerWrite.x___ <- OP_ops0_s2_WaitController_registerWrite(OP_ops0_s2_WaitController::registerWrite.x___) | x___ <- OP_ops0_s2_WaitController::RegisterDataOutput ]]
		[[
			OP_ops0_s2_WaitController::get_active_ds0 <- get_active_ds0,
			OP_ops0_s2_WaitController::get_exec_ms0 <- get_exec_ms0,
			OP_ops0_s2_WaitController::get_exec_ds0 <- get_exec_ds0
		]]
		[[ OP_ops0_s2_WaitController::startexec <- startexec ]]
		CALL__opWaitD0(id__) = (OP_opWaitD0::O__(id__))
		[[ OP_opWaitD0::registerRead.x___ <- OP_opWaitD0_registerRead(OP_opWaitD0::registerRead.x___) | x___ <- OP_opWaitD0::RegisterDataInput ]]
		[[ OP_opWaitD0::registerWrite.x___ <- OP_opWaitD0_registerWrite(OP_opWaitD0::registerWrite.x___) | x___ <- OP_opWaitD0::RegisterDataOutput ]]
		[[
			OP_opWaitD0::get_active_ds0 <- get_active_ds0,
			OP_opWaitD0::get_exec_ms0 <- get_exec_ms0,
			OP_opWaitD0::get_x <- get_x,
			OP_opWaitD0::get_exec_ds0 <- get_exec_ds0
		]]
		[[ OP_opWaitD0::startexec <- startexec ]]
		CALL__ops0_s1_WaitController(id__) = (OP_ops0_s1_WaitController::O__(id__))
		[[ OP_ops0_s1_WaitController::registerRead.x___ <- OP_ops0_s1_WaitController_registerRead(OP_ops0_s1_WaitController::registerRead.x___) | x___ <- OP_ops0_s1_WaitController::RegisterDataInput ]]
		[[ OP_ops0_s1_WaitController::registerWrite.x___ <- OP_ops0_s1_WaitController_registerWrite(OP_ops0_s1_WaitController::registerWrite.x___) | x___ <- OP_ops0_s1_WaitController::RegisterDataOutput ]]
		[[
			OP_ops0_s1_WaitController::get_active_ds0 <- get_active_ds0,
			OP_ops0_s1_WaitController::get_exec_ms0 <- get_exec_ms0,
			OP_ops0_s1_WaitController::get_exec_ds0 <- get_exec_ds0
		]]
		[[ OP_ops0_s1_WaitController::startexec <- startexec ]]
		
		-- definition of functions used to expose flow channels
		ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
						   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
						   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
						   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
							 
		ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
					[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
					[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
					[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		
		-- declaring identifiers of state and final states
		datatype SIDS = SID_stm0
		              | SID_stm0_s0
		              | SID_stm0_s0_s1
		              | SID_stm0_s0_s2
		              | SID_stm0_s0_f0
		
		-- declaring identifiers of transitions
		datatype TIDS = NULLTRANSITION__
		              | TID_stm0_s0_t0
		              | TID_stm0_s0_t1
		              | TID_stm0_s0_t2
		              | TID_stm0_s0_t3
		              | TID_stm0_t0
		
		-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
		
		ITIDS = {
			TID_stm0_s0_t1,	TID_stm0_s0_t2,	TID_stm0_s0_t3
		}
		
		int_int = {|
			internal__.TID_stm0_s0_t1,
			internal__.TID_stm0_s0_t2,
			internal__.TID_stm0_s0_t3
		|}
			
		
		internal_events = {|enter,entered,exit,exited|}
		
		-- declaring all states
		CS_stm0_s0_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_stm0_s0},
			y____ <- {SID_stm0_s0}
		|}
		
		stm0_s0_int_int = {|
			internal__.TID_stm0_s0_t1,
			internal__.TID_stm0_s0_t2,
			internal__.TID_stm0_s0_t3
		|}
			
		
		stm0_s0_int_triggers = {|
			internal__.TID_stm0_s0_t0,
			internal__.TID_stm0_s0_t1,
			internal__.TID_stm0_s0_t2,
			internal__.TID_stm0_s0_t3
		|}
		
		State_stm0_s0_s1_R(id__) = 
			State_stm0_s0_s1(id__)
		 		[|diff(stm0_s0_int_int,stm0_s0_s1_triggers)|]
		 	SKIP
		 		
		State_stm0_s0_s2_R(id__) = 
			State_stm0_s0_s2(id__)
		 		[|diff(stm0_s0_int_int,stm0_s0_s2_triggers)|]
		 	SKIP
		 		
		State_stm0_s0_f0_R(id__) = 
			State_stm0_s0_f0(id__)
		 		[|diff(stm0_s0_int_int,stm0_s0_f0_triggers)|]
		 	SKIP
		 		
		State_stm0_s0(id__) = (
			State_stm0_s0_aux(id__)
				[|
					union(
						diff(int_int, stm0_s0_int_triggers),
						{|enter.x____.y____,
						  entered.x____.y____,
						  exit.x____.y____,
						  exited.x____.y____ |
						  x____ <- diff(SIDS,{SID_stm0_s0_s1,SID_stm0_s0_s2,SID_stm0_s0_f0}),
						  y____ <- {SID_stm0_s0_s1,SID_stm0_s0_s2,SID_stm0_s0_f0}
					    |}
					)
				|]
			(
				State_stm0_s0_s1_R(id__)
					[|inter(CS_stm0_s0_s1_sync,union(CS_stm0_s0_s2_sync,CS_stm0_s0_f0_sync))|]
				(
					State_stm0_s0_s2_R(id__)
						[|inter(CS_stm0_s0_s2_sync,CS_stm0_s0_f0_sync)|]
					State_stm0_s0_f0_R(id__)
				)
			)
		)
		
		stm0_s0_triggers = {|
			internal__.TID_stm0_s0_t1,
			internal__.TID_stm0_s0_t0,
			internal__.TID_stm0_s0_t3,
			internal__.TID_stm0_s0_t2
		|}
		
		State_stm0_s0_aux(id__) = let
			State_stm0_s0_aux_execute(id__,o____) = SKIP; 
			I_stm0_s0_i0(id__);
				entered!o____!SID_stm0_s0 ->
				(true&CALL__opWaitD0(
							id__
						); STOP /\ (
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_stm0_s0_t1,TID_stm0_s0_t0,TID_stm0_s0_t3,TID_stm0_s0_t2}) -> exit?y____:diff(SIDS,{SID_stm0_s0})!SID_stm0_s0 -> (
							exit!SID_stm0_s0?z____:{SID_stm0_s0_s1,SID_stm0_s0_s2,SID_stm0_s0_f0} -> exited!SID_stm0_s0!z____ -> 
									SKIP;
							SKIP;
							exited!y____!SID_stm0_s0 -> SKIP);
							State_stm0_s0_aux(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_stm0_s0})!SID_stm0_s0 -> (State_stm0_s0_aux_execute(id__,x____))
		
		CS_stm0_s0_s1_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_stm0_s0_s1,SID_stm0_s0_s2,SID_stm0_s0_f0},
			y____ <- {SID_stm0_s0_s1}
		|}
		
		
		stm0_s0_s1_triggers = {|
			internal__.TID_stm0_s0_t1,
			internal__.TID_stm0_s0_t3,
			internal__.TID_stm0_s0_t2
		|}
		
		State_stm0_s0_s1(id__) = let
			T_stm0_s0_t1(id__) = internal__!TID_stm0_s0_t1 ->  exit.SID_stm0_s0_s1.SID_stm0_s0_s1 -> SKIP;
								SKIP;exited.SID_stm0_s0_s1.SID_stm0_s0_s1 -> SKIP;
								enter!SID_stm0_s0_s1!SID_stm0_s0_s2 -> entered!SID_stm0_s0_s1!SID_stm0_s0_s2 ->
								State_stm0_s0_s1(id__)
			State_stm0_s0_s1_execute(id__,o____) = true&CALL__ops0_s1_WaitController(
						id__
					); 
				entered!o____!SID_stm0_s0_s1 ->
				(SKIP; STOP /\ (
					T_stm0_s0_t1(id__)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_stm0_s0_t1,TID_stm0_s0_t3,TID_stm0_s0_t2}) -> exit?y____:diff(SIDS,{SID_stm0_s0_s1})!SID_stm0_s0_s1 -> (
							SKIP;
							exited!y____!SID_stm0_s0_s1 -> SKIP);
							State_stm0_s0_s1(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_stm0_s0_s1})!SID_stm0_s0_s1 -> (State_stm0_s0_s1_execute(id__,x____))
		
		CS_stm0_s0_s2_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_stm0_s0_s1,SID_stm0_s0_s2,SID_stm0_s0_f0},
			y____ <- {SID_stm0_s0_s2}
		|}
		
		
		stm0_s0_s2_triggers = {|
			internal__.TID_stm0_s0_t1,
			internal__.TID_stm0_s0_t3,
			internal__.TID_stm0_s0_t2
		|}
		
		State_stm0_s0_s2(id__) = let
			T_stm0_s0_t2(id__) = internal__!TID_stm0_s0_t2 ->  exit.SID_stm0_s0_s2.SID_stm0_s0_s2 -> SKIP;
								SKIP;exited.SID_stm0_s0_s2.SID_stm0_s0_s2 -> SKIP;
								true&(registerWrite.o_b -> SKIP);enter!SID_stm0_s0_s2!SID_stm0_s0_s1 -> entered!SID_stm0_s0_s2!SID_stm0_s0_s1 ->
								State_stm0_s0_s2(id__)
			T_stm0_s0_t3(id__) = internal__!TID_stm0_s0_t3 ->  exit.SID_stm0_s0_s2.SID_stm0_s0_s2 -> SKIP;
								SKIP;exited.SID_stm0_s0_s2.SID_stm0_s0_s2 -> SKIP;
								true&(registerWrite.o_a -> SKIP);enter!SID_stm0_s0_s2!SID_stm0_s0_f0 -> entered!SID_stm0_s0_s2!SID_stm0_s0_f0 ->
								State_stm0_s0_s2(id__)
			State_stm0_s0_s2_execute(id__,o____) = true&CALL__ops0_s2_WaitController(
						id__
					); 
				entered!o____!SID_stm0_s0_s2 ->
				(SKIP; STOP /\ (
					T_stm0_s0_t2(id__)[]
					T_stm0_s0_t3(id__)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_stm0_s0_t1,TID_stm0_s0_t3,TID_stm0_s0_t2}) -> exit?y____:diff(SIDS,{SID_stm0_s0_s2})!SID_stm0_s0_s2 -> (
							SKIP;
							exited!y____!SID_stm0_s0_s2 -> SKIP);
							State_stm0_s0_s2(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_stm0_s0_s2})!SID_stm0_s0_s2 -> (State_stm0_s0_s2_execute(id__,x____))
		
		CS_stm0_s0_f0_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_stm0_s0_s1,SID_stm0_s0_s2,SID_stm0_s0_f0},
			y____ <- {SID_stm0_s0_f0}
		|}
		
		
		stm0_s0_f0_triggers = {|
		|}
		
		State_stm0_s0_f0(id__) = let
			State_stm0_s0_f0_execute(id__,o____) = SKIP; 
				entered!o____!SID_stm0_s0_f0 ->
				(SKIP; STOP /\ (
					internal__?x____:diff(ITIDS,{NULLTRANSITION__}) -> exit?y____:diff(SIDS,{SID_stm0_s0_f0})!SID_stm0_s0_f0 -> (
							SKIP;
							exited!y____!SID_stm0_s0_f0 -> SKIP);
							State_stm0_s0_f0(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_stm0_s0_f0})!SID_stm0_s0_f0 -> (State_stm0_s0_f0_execute(id__,x____))
		
		
		I_stm0_s0_i0(id__) = let
			T_stm0_s0_t0(id__) = internal__!TID_stm0_s0_t0 -> enter!SID_stm0_s0!SID_stm0_s0_s1 -> entered!SID_stm0_s0!SID_stm0_s0_s1 ->
			SKIP
		within
			T_stm0_s0_t0(id__)
		
		I_stm0_i0(id__) = let
			T_stm0_t0(id__) = internal__!TID_stm0_t0 -> enter!SID_stm0!SID_stm0_s0 -> entered!SID_stm0!SID_stm0_s0 ->
			SKIP
		within
			T_stm0_t0(id__)
		
		
		State_stm0_s0_R(id__) = 
			State_stm0_s0(id__)
				[|diff(int_int,stm0_s0_triggers)|]
			SKIP
				 		
			
		STM(id__) = 
			let
				Ending = endexec -> (startexec -> Ending [] terminate -> SKIP)
			within
				startexec -> 
					(
						(
							(
							I_stm0_i0(id__)
								[|
									{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
										x____ <- diff(SIDS,{SID_stm0_s0}),
										y____ <- {SID_stm0_s0}
								|}|]
							State_stm0_s0_R(id__)
							) [|{|terminate|}|> SKIP
						) \ {|terminate|}
					) ; Ending
		
		-- optimized memory process
		channel getV_exec_ds0: core_boolean
		channel getV_exec_ms0: core_boolean
		channel getV_active_ds0: core_boolean
		channel getV_x: core_int
		
		-- individual memory processes
		Memory_exec_ds0(x__) = ( 
			get_exec_ds0!x__ -> Memory_exec_ds0(x__)
			[]
			getV_exec_ds0!x__ -> Memory_exec_ds0(x__)
			[]
			set_exec_ds0?x__ -> Memory_exec_ds0(x__)
		)
		Memory_exec_ms0(x__) = ( 
			get_exec_ms0!x__ -> Memory_exec_ms0(x__)
			[]
			getV_exec_ms0!x__ -> Memory_exec_ms0(x__)
			[]
			set_exec_ms0?x__ -> Memory_exec_ms0(x__)
		)
		Memory_active_ds0(x__) = ( 
			get_active_ds0!x__ -> Memory_active_ds0(x__)
			[]
			getV_active_ds0!x__ -> Memory_active_ds0(x__)
			[]
			set_active_ds0?x__ -> Memory_active_ds0(x__)
		)
		Memory_x(x__) = ( 
			get_x!x__ -> Memory_x(x__)
			[]
			getV_x!x__ -> Memory_x(x__)
			[]
			registerRead.i_x?x__ -> Memory_x(x__)
			[]
			registerWrite.o_x?x__ -> Memory_x(x__)
		)
		
		-- processes that read variables and offer transitions
		MemoryTransitions(id__,
			exec_ds0,
			exec_ms0,
			active_ds0,
			x,
			ops0_s2_WaitController_x,
			ops0_s1_WaitController_x) = (
			startexec -> SKIP
		
			[]	internal__!TID_stm0_s0_t0 -> SKIP
			[]
			internal__!TID_stm0_s0_t1 -> SKIP
			[]
			((x>=1))&(internal__!TID_stm0_s0_t2 -> SKIP)
			[]
			((x==0))&(internal__!TID_stm0_s0_t3 -> SKIP)
			[]
			internal__!TID_stm0_t0 -> SKIP
		
			[]
				OP_ops0_s2_WaitController::MemoryTransitions(id__,
				ops0_s2_WaitController_x,
				active_ds0,
				exec_ms0,
				exec_ds0)
			[]
			OP_opWaitD0::MemoryTransitions(id__,
				active_ds0,
				exec_ms0,
				x,
				exec_ds0)
			[]
			OP_ops0_s1_WaitController::MemoryTransitions(id__,
				ops0_s1_WaitController_x,
				active_ds0,
				exec_ms0,
				exec_ds0)
		
		 	[]
		 	 	set_exec_ds0?x__ -> SKIP
		 	[]
		 	set_exec_ms0?x__ -> SKIP
		 	[]
		 	set_active_ds0?x__ -> SKIP
		
		 	[]
		 	 	registerWrite.o_x?x__ -> SKIP
		 			 			 	
		 	)
		MemoryTransitions_stm0(id__) =
			(
			getV_exec_ds0?exec_ds0 ->	
			getV_exec_ms0?exec_ms0 ->	
			getV_active_ds0?active_ds0 ->	
			getV_x?x ->	
			OP_ops0_s2_WaitController::getV_x?ops0_s2_WaitController_x ->	
			OP_ops0_s1_WaitController::getV_x?ops0_s1_WaitController_x ->
			 MemoryTransitions(id__,
			 	exec_ds0,
			 	exec_ms0,
			 	active_ds0,
			 	x,
			 	ops0_s2_WaitController_x,
			 	ops0_s1_WaitController_x);
			 MemoryTransitions_stm0(id__)
			)
		
		-- synchronisation, hiding and process sets 
		MemoryVariablesProcesses_stm0 = Union(
			{
				OP_ops0_s2_WaitController::MemoryVariablesProcesses_ops0_s2_WaitController,
				OP_opWaitD0::MemoryVariablesProcesses_opWaitD0,
				OP_ops0_s1_WaitController::MemoryVariablesProcesses_ops0_s1_WaitController,
				{
					Memory_exec_ds0(false),
					Memory_exec_ms0(false),
					Memory_active_ds0(true),
					Memory_x(0)
				}
			}
		)
		
		MemoryVariablesSyncSet = Union({
			OP_ops0_s2_WaitController::MemoryVariablesSyncSet,
			OP_opWaitD0::MemoryVariablesSyncSet,
			OP_ops0_s1_WaitController::MemoryVariablesSyncSet,
			{|
				set_exec_ds0,
				getV_exec_ms0,
				getV_x,
				getV_exec_ds0,
				set_exec_ms0,
				setWC,
				getV_active_ds0,
				set_active_ds0,
				registerWrite.o_x
			|}	
		})
		
		MemoryVariablesHideSet = Union({
			OP_ops0_s2_WaitController::MemoryVariablesHideSet,
			OP_opWaitD0::MemoryVariablesHideSet,
			OP_ops0_s1_WaitController::MemoryVariablesHideSet,
			{|
				getV_exec_ms0,
				getV_x,
				getV_exec_ds0,
				getWC,
				getV_active_ds0
			|}
		})
		
		-- combined individual memory processes
		MemoryVariables = ||| P : MemoryVariablesProcesses_stm0 @ P
		
		-- complete memory process
		MemoryN(id__) = 
			(MemoryVariables 
			 [| MemoryVariablesSyncSet |] 
			 (	startexec -> wbisim(MemoryTransitions_stm0(id__))
			 	[| union({|startexec|},union(Transitions,diff(EndExecs,{endexec}))) |]
			 	-- The following process is an equivalent way to specify that between endexec
			 	-- and startexec no events in the set Transitions are available, thus preventing
			 	-- the state machine from performing transitions in between. Note that there is
			 	-- no synchronisation on the single 'endexec' event itself, because this only
			 	-- arises from an action, and the memory does not interfere with events in
			 	-- actions.
			 	(let
			 		TransitionController = startexec -> (RUN(Transitions) 
			 											 /\ ([] e : EndExecs @ e -> TransitionController))
			 	within 
			 		TransitionController)
			 	
			 	-- It isn't part of MemoryTransitions_ itself, because such a process would need
			 	-- to permit updates to setWC events, emanating from processes controlling clocks.
			 	-- Currently the MemoryTransitions_ process of a software operation called 
			 	-- within this state machine is copied into this process. So to incorporate the
			 	-- control below in such a process would require either:
			 	--
			 	-- (1) knowing about the clocks of every state machine that could call it, which
			 	-- 	   is not compositional;
			 	-- (2) not copying the process, but generating the transition choices explicitly.
			 	--
			 )
			) \ MemoryVariablesHideSet
		
		-- main process
		MachineMemorySyncSet = Union({
			union(
				union(
					{|get_exec_ds0,set_exec_ds0,
					get_exec_ms0,set_exec_ms0,
					get_active_ds0,set_active_ds0|},
					union({||},
						  {|get_x,registerWrite.o_x|}
						 )
				)
					
				,
				{|internal__.TID_stm0_s0_t0,
				internal__.TID_stm0_s0_t1,
				internal__.TID_stm0_s0_t2,
				internal__.TID_stm0_s0_t3,
				internal__.TID_stm0_t0|}
			),
			{|deadline|},
			WCresets
			, OP_ops0_s2_WaitController::MachineMemorySyncSet
			, OP_opWaitD0::MachineMemorySyncSet
			, OP_ops0_s1_WaitController::MachineMemorySyncSet
		})
		
		MachineMemoryHidingSet = Union({
			union(
				{|get_exec_ds0,set_exec_ds0,
				get_exec_ms0,set_exec_ms0,
				get_active_ds0,set_active_ds0|},
				union({||},
					  {|get_x|})
			)
			,
			{|deadline|}
			, OP_ops0_s2_WaitController::MachineMemoryHidingSet
			, OP_opWaitD0::MachineMemoryHidingSet
			, OP_ops0_s1_WaitController::MachineMemoryHidingSet
		})
		
		MachineInternalEvents = {|
			internal__
			, OP_ops0_s2_WaitController::internal__
			, OP_opWaitD0::internal__
			, OP_ops0_s1_WaitController::internal__
		|}
	
		-- main process
		AUX(id__,cycle_stm0_stm0) =
			prioritise(
				(
			 		(
			 			cycle(cycle_stm0_stm0)
			 			[| {| endexec,endexec__
			 					,OP_ops0_s2_WaitController::endexec,OP_ops0_s2_WaitController::endexec__
			 					,OP_opWaitD0::endexec,OP_opWaitD0::endexec__
			 					,OP_ops0_s1_WaitController::endexec,OP_ops0_s1_WaitController::endexec__
			 					,registerRead
			 					,registerWrite,startexec,terminate,tock |} |]
			 			(MemoryN(id__) 
			 	 		[| union(WCsets,WCsync) |] 
			 	 		Clocks(id__)
			 			)\WCsets
			 		)
			 		[| union(MachineMemorySyncSet,{| startexec,endexec,endexec__
			 										 ,OP_ops0_s2_WaitController::endexec,OP_ops0_s2_WaitController::endexec__
			 										 ,OP_opWaitD0::endexec,OP_opWaitD0::endexec__
			 										 ,OP_ops0_s1_WaitController::endexec,OP_ops0_s1_WaitController::endexec__
			 										  |}) |]
			 		wbisim(STM(id__))
				)[[ endexec__.x____ <- endexec | x____ <- TIDS ]]
				[[ OP_ops0_s2_WaitController::endexec__.x____ <- endexec | x____ <- OP_ops0_s2_WaitController::TIDS ]]
				[[ OP_ops0_s2_WaitController::endexec <- endexec ]]
				[[ OP_opWaitD0::endexec__.x____ <- endexec | x____ <- OP_opWaitD0::TIDS ]]
				[[ OP_opWaitD0::endexec <- endexec ]]
				[[ OP_ops0_s1_WaitController::endexec__.x____ <- endexec | x____ <- OP_ops0_s1_WaitController::TIDS ]]
				[[ OP_ops0_s1_WaitController::endexec <- endexec ]]
			\union(union(MachineMemoryHidingSet,MachineInternalEvents),{|startexec|})
			[|{|terminate|}|>SKIP
			,<{},{tock}>)
		
		internal_(id__,cycle_stm0_stm0) =
			prioritise(
						(
					 		(
					 			cycle(cycle_stm0_stm0)
					 			[| {| endexec,endexec__
					 					,OP_ops0_s2_WaitController::endexec,OP_ops0_s2_WaitController::endexec__
					 					,OP_opWaitD0::endexec,OP_opWaitD0::endexec__
					 					,OP_ops0_s1_WaitController::endexec,OP_ops0_s1_WaitController::endexec__
					 					,registerRead
					 					,registerWrite,startexec,terminate,tock |} |]
					 			(MemoryN(id__) 
					 	 		[| union(WCsets,WCsync) |] 
					 	 		Clocks(id__)
					 			)\WCsets
					 		)
					 		[| union(MachineMemorySyncSet,{| startexec,endexec,endexec__
					 										 ,OP_ops0_s2_WaitController::endexec,OP_ops0_s2_WaitController::endexec__
					 										 ,OP_opWaitD0::endexec,OP_opWaitD0::endexec__
					 										 ,OP_ops0_s1_WaitController::endexec,OP_ops0_s1_WaitController::endexec__
					 										  |}) |]
					 		wbisim(STM(id__))
						)[[ endexec__.x____ <- endexec | x____ <- TIDS ]]
						[[ OP_ops0_s2_WaitController::endexec__.x____ <- endexec | x____ <- OP_ops0_s2_WaitController::TIDS ]]
						[[ OP_ops0_s2_WaitController::endexec <- endexec ]]
						[[ OP_opWaitD0::endexec__.x____ <- endexec | x____ <- OP_opWaitD0::TIDS ]]
						[[ OP_opWaitD0::endexec <- endexec ]]
						[[ OP_ops0_s1_WaitController::endexec__.x____ <- endexec | x____ <- OP_ops0_s1_WaitController::TIDS ]]
						[[ OP_ops0_s1_WaitController::endexec <- endexec ]]
					\union(MachineMemoryHidingSet,{|startexec|})
					[|{|terminate|}|>SKIP
					,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)
		
		
		OP_ops0_s2_WaitController_registerRead(OP_ops0_s2_WaitController::registerRead.OP_ops0_s2_WaitController::i_exec_ds0.x__) = get_exec_ds0.x__
		OP_ops0_s2_WaitController_registerRead(OP_ops0_s2_WaitController::registerRead.OP_ops0_s2_WaitController::i_exec_ms0.x__) = get_exec_ms0.x__
		OP_ops0_s2_WaitController_registerRead(OP_ops0_s2_WaitController::registerRead.OP_ops0_s2_WaitController::i_active_ds0.x__) = get_active_ds0.x__
		OP_ops0_s2_WaitController_registerWrite(OP_ops0_s2_WaitController::registerWrite.OP_ops0_s2_WaitController::o_exec_ds0.x__) = set_exec_ds0.x__
		OP_ops0_s2_WaitController_registerWrite(OP_ops0_s2_WaitController::registerWrite.OP_ops0_s2_WaitController::o_exec_ms0.x__) = set_exec_ms0.x__
		OP_ops0_s2_WaitController_registerWrite(OP_ops0_s2_WaitController::registerWrite.OP_ops0_s2_WaitController::o_active_ds0.x__) = set_active_ds0.x__
		OP_opWaitD0_registerRead(OP_opWaitD0::registerRead.OP_opWaitD0::i_x.x__) = registerRead.i_x.x__
		OP_opWaitD0_registerRead(OP_opWaitD0::registerRead.OP_opWaitD0::i_exec_ms0.x__) = get_exec_ms0.x__
		OP_opWaitD0_registerRead(OP_opWaitD0::registerRead.OP_opWaitD0::i_active_ds0.x__) = get_active_ds0.x__
		OP_opWaitD0_registerRead(OP_opWaitD0::registerRead.OP_opWaitD0::i_exec_ds0.x__) = get_exec_ds0.x__
		OP_opWaitD0_registerWrite(OP_opWaitD0::registerWrite.OP_opWaitD0::o_x.x__) = registerWrite.o_x.x__
		OP_opWaitD0_registerWrite(OP_opWaitD0::registerWrite.OP_opWaitD0::o_exec_ms0.x__) = set_exec_ms0.x__
		OP_opWaitD0_registerWrite(OP_opWaitD0::registerWrite.OP_opWaitD0::o_active_ds0.x__) = set_active_ds0.x__
		OP_opWaitD0_registerWrite(OP_opWaitD0::registerWrite.OP_opWaitD0::o_exec_ds0.x__) = set_exec_ds0.x__
		OP_ops0_s1_WaitController_registerRead(OP_ops0_s1_WaitController::registerRead.OP_ops0_s1_WaitController::i_active_ds0.x__) = get_active_ds0.x__
		OP_ops0_s1_WaitController_registerRead(OP_ops0_s1_WaitController::registerRead.OP_ops0_s1_WaitController::i_exec_ds0.x__) = get_exec_ds0.x__
		OP_ops0_s1_WaitController_registerRead(OP_ops0_s1_WaitController::registerRead.OP_ops0_s1_WaitController::i_exec_ms0.x__) = get_exec_ms0.x__
		OP_ops0_s1_WaitController_registerWrite(OP_ops0_s1_WaitController::registerWrite.OP_ops0_s1_WaitController::o_active_ds0.x__) = set_active_ds0.x__
		OP_ops0_s1_WaitController_registerWrite(OP_ops0_s1_WaitController::registerWrite.OP_ops0_s1_WaitController::o_exec_ds0.x__) = set_exec_ds0.x__
		OP_ops0_s1_WaitController_registerWrite(OP_ops0_s1_WaitController::registerWrite.OP_ops0_s1_WaitController::o_exec_ms0.x__) = set_exec_ms0.x__
	
		datatype SOutputEvents = SOutput_a
			| SOutput_b
			| SOutput_x
		
		cycle(cycle_stm0_stm0) =
			let
				project(o_a) = SOutput_a
				project(o_b) = SOutput_b
				project(o_x.x__) = SOutput_x
		
				Cycle =
					(registerRead.i_x?x__ -> SKIP);
					startexec -> CollectOutputs(SOutputEvents);
					(wait(cycle_stm0_stm0) [] terminate -> SKIP);
					Cycle
				
				CollectOutputs(sout) =
					(registerWrite?outp:{ outp | outc <- inter(sout,SOutputEvents), outp <- RegisterDataOutput,project(outp) == outc} -> CollectOutputs(diff(sout,{project(outp)}))
					[]
					endexec -> SKIP
					[]
					endexec__?x__ -> SKIP
					[]
					OP_ops0_s2_WaitController::endexec__?x__ -> SKIP
								[]
					OP_opWaitD0::endexec__?x__ -> SKIP
								[]
					OP_ops0_s1_WaitController::endexec__?x__ -> SKIP
					)
			within
				Cycle
	
		Timed(OneStep) {
			-- declare clocks
			datatype ClockSet = dummyC
			channel clockReset 		-- no clocks declared
			
			-- declare trigger deadlines channel
			channel deadline : TIDS.Signal
	
			-- compile clocks process
			
			-- set of strings that uniquely identify the waiting conditions, each of which is 
			-- used to synchronise with the Memory process to set the correspoding variable in
			-- the memory process.
			datatype setWC_identifierSet = dummyWC
			
			-- declaring getWC and setWC channel for updating memory variables related to clocks
			channel setWC : setWC_identifierSet.Bool
			channel getWC : setWC_identifierSet.Bool
			
			-- Set of pairs capturing waiting condition processes and their alphabet.
			-- It includes the corresponding set of the defined operations.
			WCset(id__) = Union({
				{
				}
				,
				OP_ops0_s2_WaitController::WCset(id__)
			,
				OP_opWaitD0::WCset(id__)
			,
				OP_ops0_s1_WaitController::WCset(id__)
			})
			-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
			-- It includes the corresponding set of the defined operations.
			WCsync = Union({
				{||}
				,
				OP_ops0_s2_WaitController::WCsync
			,
				OP_opWaitD0::WCsync
			,
				OP_ops0_s1_WaitController::WCsync
			})
			-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
			-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
			WCresets = Union({
				{| | x <- SIDS |}
				,
				OP_ops0_s2_WaitController::WCresets
			,
				OP_opWaitD0::WCresets
			,
				OP_ops0_s1_WaitController::WCresets
			})
			-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
			WCsets = Union({
				{|setWC|}
				,
				OP_ops0_s2_WaitController::WCsets
			,
				OP_opWaitD0::WCsets
			,
				OP_ops0_s1_WaitController::WCsets
			})
			
			
			
			-- Clocks process
			Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
	
			-- collects all clockResets including those of operations
			ClockResets = Union({
				{|clockReset|}
				,
				OP_ops0_s2_WaitController::ClockResets
	,
				OP_opWaitD0::ClockResets
	,
				OP_ops0_s1_WaitController::ClockResets
			})
	
			-- With no internal events visible
			D__(id__,cycle_stm0_stm0) = timed_priority(AUX(id__,cycle_stm0_stm0) \ union(internal_events,ClockResets))
	
			O__(id__,cycle_stm0_stm0) = D__(id__,cycle_stm0_stm0)
	
			-- With enter/entered/exit/exited events visible
			FVS__(id__,cycle_stm0_stm0) = timed_priority(AUX(id__,cycle_stm0_stm0) \ ClockResets)
	
			-- With enterV/enteredV/exitV/exitedV events visible
			VS__(id__,cycle_stm0_stm0) = ShowV(timed_priority(AUX(id__,cycle_stm0_stm0) \ ClockResets))
	
			-- With clock resets visible
			FVS_C__(id__,cycle_stm0_stm0) = AUX(id__,cycle_stm0_stm0)
			}
	endmodule
	
	-- (Rule 7) [[ c : Controller ]]_C : CSPProcess
	D__(id__,cycle_ctrl0_ctrl0) =
		(
			(
				(
					(
					wbisim(cycleController(id__,cycle_ctrl0_ctrl0))
				 	 [| union({|stm_ref0::registerWrite.stm_ref0::o_x|},{||}) |]
				 	memoryComp(id__)
				 	)
					[| {| 	tock,
							stm_ref0::endexec,stm_ref0::registerRead,stm_ref0::registerWrite|} |]
					-- (Rule 9) composeMachines(...) : CSPProcess
				 	((let
				 		cycle_stm0_stm0 = cycle_ctrl0_ctrl0
				 	within
				 		(stm_ref0::D__(id__,cycle_stm0_stm0)
				 		\{| |})
				 		[[stm_ref0::terminate <- terminate]]
				 	)
				 	)
				) \ {|	stm_ref0::endexec,stm_ref0::registerRead,stm_ref0::registerWrite |}
			) [| {terminate} |> SKIP
		)

endmodule
