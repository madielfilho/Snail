module OP_opWaitD0
exports
	-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	external prioritise
	transparent wbisim		
	

		-- flow channels
		channel internal__ : TIDS
		channel enteredV, enterV, exitV, exitedV : SIDS
		channel enter, entered: SIDS.SIDS
		channel exit,exited: SIDS.SIDS
		
		-- RoboSim channels
		channel endexec
		channel endexec__ : TIDS
		channel startexec
		channel terminate
		
		-- declaring registerRead/Write datatypes
		datatype RegisterDataInput = i_x.core_int
			| i_exec_ms0.core_boolean
			| i_active_ds0.core_boolean
			| i_exec_ds0.core_boolean
		
		
		datatype RegisterDataOutput = o_x.core_int
			| o_exec_ms0.core_boolean
			| o_active_ds0.core_boolean
			| o_exec_ds0.core_boolean
		
		
		channel registerRead 	: RegisterDataInput
		channel registerWrite 	: RegisterDataOutput
		
		-- variable channels
		channel get_x, set_x: core_int
		channel get_exec_ds0, set_exec_ds0: core_boolean
		channel get_exec_ms0, set_exec_ms0: core_boolean
		channel get_active_ds0, set_active_ds0: core_boolean
		
		-- local variable channels for defined operations that are required by the state machine
		
		-- declaring state machine events
		
		-- declaring call and ret events for undefined operations
		
		EndExecs = {| endexec__, endexec
		 |}
		
		Transitions = {| internal__
		 |}
		
		
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machien module.
		
		
		-- definition of functions used to expose flow channels
		ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
						   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
						   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
						   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
							 
		ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
					[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
					[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
					[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		
		-- declaring identifiers of state and final states
		datatype SIDS = SID_opWaitD0
		              | SID_opWaitD0_s0
		              | SID_opWaitD0_s2
		              | SID_opWaitD0_s3
		              | SID_opWaitD0_s1
		
		-- declaring identifiers of transitions
		datatype TIDS = NULLTRANSITION__
		              | TID_opWaitD0_i_to_s0
		              | TID_opWaitD0_s0_to_f
		              | TID_opWaitD0_s3_to_s3
		              | TID_opWaitD0_t0
		              | TID_opWaitD0_t1
		
		-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
		
		ITIDS = {
			TID_opWaitD0_s0_to_f,	TID_opWaitD0_s3_to_s3,	TID_opWaitD0_t0,	TID_opWaitD0_t1
		}
		
		int_int = {|
			internal__.TID_opWaitD0_s0_to_f,
			internal__.TID_opWaitD0_s3_to_s3,
			internal__.TID_opWaitD0_t0,
			internal__.TID_opWaitD0_t1
		|}
			
		
		internal_events = {|enter,entered,exit,exited|}
		
		-- declaring all states
		CS_opWaitD0_s0_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_opWaitD0_s0,SID_opWaitD0_s2,SID_opWaitD0_s3,SID_opWaitD0_s1},
			y____ <- {SID_opWaitD0_s0}
		|}
		
		
		opWaitD0_s0_triggers = {|
			internal__.TID_opWaitD0_t1,
			internal__.TID_opWaitD0_t0,
			internal__.TID_opWaitD0_s0_to_f,
			internal__.TID_opWaitD0_s3_to_s3
		|}
		
		State_opWaitD0_s0(id__) = let
			T_opWaitD0_s0_to_f(id__) = internal__!TID_opWaitD0_s0_to_f ->  exit.SID_opWaitD0_s0.SID_opWaitD0_s0 -> SKIP;
								SKIP;exited.SID_opWaitD0_s0.SID_opWaitD0_s0 -> SKIP;
								true & (registerWrite!o_exec_ds0!true -> SKIP);enter!SID_opWaitD0_s0!SID_opWaitD0_s1 -> entered!SID_opWaitD0_s0!SID_opWaitD0_s1 ->
								State_opWaitD0_s0(id__)
			State_opWaitD0_s0_execute(id__,o____) = SKIP; 
				entered!o____!SID_opWaitD0_s0 ->
				(SKIP; STOP /\ (
					T_opWaitD0_s0_to_f(id__)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_opWaitD0_t1,TID_opWaitD0_t0,TID_opWaitD0_s0_to_f,TID_opWaitD0_s3_to_s3}) -> exit?y____:diff(SIDS,{SID_opWaitD0_s0})!SID_opWaitD0_s0 -> (
							SKIP;
							exited!y____!SID_opWaitD0_s0 -> SKIP);
							State_opWaitD0_s0(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_opWaitD0_s0})!SID_opWaitD0_s0 -> (State_opWaitD0_s0_execute(id__,x____))
		
		CS_opWaitD0_s2_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_opWaitD0_s0,SID_opWaitD0_s2,SID_opWaitD0_s3,SID_opWaitD0_s1},
			y____ <- {SID_opWaitD0_s2}
		|}
		
		
		opWaitD0_s2_triggers = {|
			internal__.TID_opWaitD0_t0,
			internal__.TID_opWaitD0_s3_to_s3
		|}
		
		State_opWaitD0_s2(id__) = let
			T_opWaitD0_s3_to_s3(id__) = internal__!TID_opWaitD0_s3_to_s3 ->  exit.SID_opWaitD0_s2.SID_opWaitD0_s2 -> SKIP;
								SKIP;exited.SID_opWaitD0_s2.SID_opWaitD0_s2 -> SKIP;
								true & (registerWrite!o_exec_ds0!true -> SKIP);enter!SID_opWaitD0_s2!SID_opWaitD0_s3 -> entered!SID_opWaitD0_s2!SID_opWaitD0_s3 ->
								State_opWaitD0_s2(id__)
			State_opWaitD0_s2_execute(id__,o____) = SKIP; 
				entered!o____!SID_opWaitD0_s2 ->
				(SKIP; STOP /\ (
					T_opWaitD0_s3_to_s3(id__)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_opWaitD0_t0,TID_opWaitD0_s3_to_s3}) -> exit?y____:diff(SIDS,{SID_opWaitD0_s2})!SID_opWaitD0_s2 -> (
							SKIP;
							exited!y____!SID_opWaitD0_s2 -> SKIP);
							State_opWaitD0_s2(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_opWaitD0_s2})!SID_opWaitD0_s2 -> (State_opWaitD0_s2_execute(id__,x____))
		
		CS_opWaitD0_s3_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_opWaitD0_s0,SID_opWaitD0_s2,SID_opWaitD0_s3,SID_opWaitD0_s1},
			y____ <- {SID_opWaitD0_s3}
		|}
		
		
		opWaitD0_s3_triggers = {|
			internal__.TID_opWaitD0_t0,
			internal__.TID_opWaitD0_s3_to_s3
		|}
		
		State_opWaitD0_s3(id__) = let
			T_opWaitD0_t0(id__) = internal__!TID_opWaitD0_t0 ->  exit.SID_opWaitD0_s3.SID_opWaitD0_s3 -> SKIP;
								SKIP;exited.SID_opWaitD0_s3.SID_opWaitD0_s3 -> SKIP;
								true & (registerWrite!o_exec_ms0!false -> SKIP);enter!SID_opWaitD0_s3!SID_opWaitD0_s2 -> entered!SID_opWaitD0_s3!SID_opWaitD0_s2 ->
								State_opWaitD0_s3(id__)
			State_opWaitD0_s3_execute(id__,o____) = SKIP; 
				entered!o____!SID_opWaitD0_s3 ->
				(SKIP; STOP /\ (
					T_opWaitD0_t0(id__)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_opWaitD0_t0,TID_opWaitD0_s3_to_s3}) -> exit?y____:diff(SIDS,{SID_opWaitD0_s3})!SID_opWaitD0_s3 -> (
							SKIP;
							exited!y____!SID_opWaitD0_s3 -> SKIP);
							State_opWaitD0_s3(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_opWaitD0_s3})!SID_opWaitD0_s3 -> (State_opWaitD0_s3_execute(id__,x____))
		
		CS_opWaitD0_s1_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_opWaitD0_s0,SID_opWaitD0_s2,SID_opWaitD0_s3,SID_opWaitD0_s1},
			y____ <- {SID_opWaitD0_s1}
		|}
		
		
		opWaitD0_s1_triggers = {|
			internal__.TID_opWaitD0_t1,
			internal__.TID_opWaitD0_t0,
			internal__.TID_opWaitD0_s3_to_s3
		|}
		
		State_opWaitD0_s1(id__) = let
			T_opWaitD0_t1(id__) = internal__!TID_opWaitD0_t1 ->  exit.SID_opWaitD0_s1.SID_opWaitD0_s1 -> SKIP;
								SKIP;exited.SID_opWaitD0_s1.SID_opWaitD0_s1 -> SKIP;
								get_x?x -> true & (registerWrite!o_x!Plus(x, 1, core_int) -> SKIP);true & (registerWrite!o_exec_ms0!false -> SKIP);enter!SID_opWaitD0_s1!SID_opWaitD0_s2 -> entered!SID_opWaitD0_s1!SID_opWaitD0_s2 ->
								State_opWaitD0_s1(id__)
			State_opWaitD0_s1_execute(id__,o____) = SKIP; 
				entered!o____!SID_opWaitD0_s1 ->
				(SKIP; STOP /\ (
					T_opWaitD0_t1(id__)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_opWaitD0_t1,TID_opWaitD0_t0,TID_opWaitD0_s3_to_s3}) -> exit?y____:diff(SIDS,{SID_opWaitD0_s1})!SID_opWaitD0_s1 -> (
							SKIP;
							exited!y____!SID_opWaitD0_s1 -> SKIP);
							State_opWaitD0_s1(id__)
				))
		within
			enter?x____:diff(SIDS,{SID_opWaitD0_s1})!SID_opWaitD0_s1 -> (State_opWaitD0_s1_execute(id__,x____))
		
		
		I_opWaitD0_i0(id__) = let
			T_opWaitD0_i_to_s0(id__) = internal__!TID_opWaitD0_i_to_s0 -> enter!SID_opWaitD0!SID_opWaitD0_s0 -> entered!SID_opWaitD0!SID_opWaitD0_s0 ->
			SKIP
		within
			T_opWaitD0_i_to_s0(id__)
		
		
		State_opWaitD0_s0_R(id__) = 
			State_opWaitD0_s0(id__)
				[|diff(int_int,opWaitD0_s0_triggers)|]
			SKIP
				 		
		State_opWaitD0_s2_R(id__) = 
			State_opWaitD0_s2(id__)
				[|diff(int_int,opWaitD0_s2_triggers)|]
			SKIP
				 		
		State_opWaitD0_s3_R(id__) = 
			State_opWaitD0_s3(id__)
				[|diff(int_int,opWaitD0_s3_triggers)|]
			SKIP
				 		
		State_opWaitD0_s1_R(id__) = 
			State_opWaitD0_s1(id__)
				[|diff(int_int,opWaitD0_s1_triggers)|]
			SKIP
				 		
			
		STM(id__) = (
			I_opWaitD0_i0(id__)
				[|
					{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
						x____ <- diff(SIDS,{SID_opWaitD0_s0,SID_opWaitD0_s2,SID_opWaitD0_s3,SID_opWaitD0_s1}),
						y____ <- {SID_opWaitD0_s0,SID_opWaitD0_s2,SID_opWaitD0_s3,SID_opWaitD0_s1}
				|}|]
			(
				State_opWaitD0_s0_R(id__)
					[|inter(CS_opWaitD0_s0_sync,union(union(CS_opWaitD0_s2_sync,CS_opWaitD0_s3_sync),CS_opWaitD0_s1_sync))|]
				(
					State_opWaitD0_s2_R(id__)
						[|inter(CS_opWaitD0_s2_sync,union(CS_opWaitD0_s3_sync,CS_opWaitD0_s1_sync))|]
					(
						State_opWaitD0_s3_R(id__)
							[|inter(CS_opWaitD0_s3_sync,CS_opWaitD0_s1_sync)|]
						State_opWaitD0_s1_R(id__)
					)
				)
			)
		)
		
		-- optimized memory process
		channel getV_active_ds0: core_boolean
		channel getV_exec_ms0: core_boolean
		channel getV_x: core_int
		channel getV_exec_ds0: core_boolean
		
		-- individual memory processes
		Memory_active_ds0(x__) = ( 
			get_active_ds0!x__ -> Memory_active_ds0(x__)
			[]
			getV_active_ds0!x__ -> Memory_active_ds0(x__)
			[]
			registerRead.i_active_ds0?x__ -> Memory_active_ds0(x__)
			[]
			registerWrite.o_active_ds0?x__ -> Memory_active_ds0(x__)
		)
		Memory_exec_ms0(x__) = ( 
			get_exec_ms0!x__ -> Memory_exec_ms0(x__)
			[]
			getV_exec_ms0!x__ -> Memory_exec_ms0(x__)
			[]
			registerRead.i_exec_ms0?x__ -> Memory_exec_ms0(x__)
			[]
			registerWrite.o_exec_ms0?x__ -> Memory_exec_ms0(x__)
		)
		Memory_x(x__) = ( 
			get_x!x__ -> Memory_x(x__)
			[]
			getV_x!x__ -> Memory_x(x__)
			[]
			registerRead.i_x?x__ -> Memory_x(x__)
			[]
			registerWrite.o_x?x__ -> Memory_x(x__)
		)
		Memory_exec_ds0(x__) = ( 
			get_exec_ds0!x__ -> Memory_exec_ds0(x__)
			[]
			getV_exec_ds0!x__ -> Memory_exec_ds0(x__)
			[]
			registerRead.i_exec_ds0?x__ -> Memory_exec_ds0(x__)
			[]
			registerWrite.o_exec_ds0?x__ -> Memory_exec_ds0(x__)
		)
		
		-- processes that read variables and offer transitions
		MemoryTransitions(id__,
			active_ds0,
			exec_ms0,
			x,
			exec_ds0) = (
		internal__!TID_opWaitD0_i_to_s0 -> SKIP
		[]
		internal__!TID_opWaitD0_s0_to_f -> SKIP
		[]
		internal__!TID_opWaitD0_s3_to_s3 -> SKIP
		[]
		((exec_ms0==true))&(internal__!TID_opWaitD0_t0 -> SKIP)
		[]
		((exec_ms0==true))&(internal__!TID_opWaitD0_t1 -> SKIP)
		 			 			 	
		 	)
		MemoryTransitions_opWaitD0(id__) =
			(
			OP_opWaitD0::getV_active_ds0?active_ds0 ->	
			OP_opWaitD0::getV_exec_ms0?exec_ms0 ->	
			OP_opWaitD0::getV_x?x ->	
			OP_opWaitD0::getV_exec_ds0?exec_ds0 ->
			 MemoryTransitions(id__,
			 	active_ds0,
			 	exec_ms0,
			 	x,
			 	exec_ds0);
			 MemoryTransitions_opWaitD0(id__)
			)
		
		-- synchronisation, hiding and process sets 
		MemoryVariablesProcesses_opWaitD0 = Union(
			{
				{
					Memory_active_ds0(true),
					Memory_exec_ms0(false),
					Memory_x(0),
					Memory_exec_ds0(false)
				}
			}
		)
		
		MemoryVariablesSyncSet = Union({
			{|
				registerWrite.o_exec_ms0,
				getV_exec_ms0,
				registerWrite.o_active_ds0,
				getV_x,
				getV_exec_ds0,
				setWC,
				getV_active_ds0,
				registerWrite.o_exec_ds0,
				registerWrite.o_x
			|}	
		})
		
		MemoryVariablesHideSet = Union({
			{|
				getV_exec_ms0,
				getV_x,
				getV_exec_ds0,
				getWC,
				getV_active_ds0
			|}
		})
		
		-- combined individual memory processes
		MemoryVariables = ||| P : MemoryVariablesProcesses_opWaitD0 @ P
		
		-- complete memory process
		MemoryN(id__) = 
			(MemoryVariables 
			 [| MemoryVariablesSyncSet |] 
			 (	startexec -> wbisim(MemoryTransitions_opWaitD0(id__))
			 	[| union({|startexec|},union(Transitions,diff(EndExecs,{endexec}))) |]
			 	-- The following process is an equivalent way to specify that between endexec
			 	-- and startexec no events in the set Transitions are available, thus preventing
			 	-- the state machine from performing transitions in between. Note that there is
			 	-- no synchronisation on the single 'endexec' event itself, because this only
			 	-- arises from an action, and the memory does not interfere with events in
			 	-- actions.
			 	(let
			 		TransitionController = startexec -> (RUN(Transitions) 
			 											 /\ ([] e : EndExecs @ e -> TransitionController))
			 	within 
			 		TransitionController)
			 	
			 	-- It isn't part of MemoryTransitions_ itself, because such a process would need
			 	-- to permit updates to setWC events, emanating from processes controlling clocks.
			 	-- Currently the MemoryTransitions_ process of a software operation called 
			 	-- within this state machine is copied into this process. So to incorporate the
			 	-- control below in such a process would require either:
			 	--
			 	-- (1) knowing about the clocks of every state machine that could call it, which
			 	-- 	   is not compositional;
			 	-- (2) not copying the process, but generating the transition choices explicitly.
			 	--
			 )
			) \ MemoryVariablesHideSet
		
		-- main process
		MachineMemorySyncSet = Union({
			union(
				union(
					{||},
					union({||},
						  {||}
						 )
				)
					
				,
				{|internal__.TID_opWaitD0_i_to_s0,
				internal__.TID_opWaitD0_s0_to_f,
				internal__.TID_opWaitD0_s3_to_s3,
				internal__.TID_opWaitD0_t0,
				internal__.TID_opWaitD0_t1|}
			),
			{|deadline|},
			WCresets
		})
		
		MachineMemoryHidingSet = Union({
			union(
				{||},
				union({||},
					  {||})
			)
			,
			{|deadline|}
		})
		
		MachineInternalEvents = {|
			internal__
		|}
		
		-- main process
		AUX(id__) = prioritise((((
			wbisim(STM(id__))
				[|MachineMemorySyncSet|]
			(wbisim(MemoryN(id__)) [| union(WCsets,WCsync) |] Clocks(id__))\WCsets
		)
		[[ endexec__.x____ <- endexec | x____ <- TIDS ]]
		\MachineMemoryHidingSet)
		[|{|terminate|}|>SKIP\MachineInternalEvents)
		,<Union({internal_events,ClockResets,{|terminate|}}),{tock}>)
		
		internal_(id__) = prioritise((((
			wbisim(STM(id__))
				[|MachineMemorySyncSet|]
			(wbisim(MemoryN(id__)) [| union(WCsets,WCsync) |] Clocks(id__))\WCsets
		)
		\MachineMemoryHidingSet)
		[|{|terminate|}|>SKIP)
		,<Union({internal_events,ClockResets,{|internal__,terminate|}}),{tock}>)		
				
		-- declare clocks
		datatype ClockSet = dummyC
		channel clockReset 		-- no clocks declared
		
		-- declare trigger deadlines channel
		channel deadline : TIDS.Signal
	
	Timed(OneStep) {	
		-- compile clocks process
		
		-- set of strings that uniquely identify the waiting conditions, each of which is 
		-- used to synchronise with the Memory process to set the correspoding variable in
		-- the memory process.
		datatype setWC_identifierSet = dummyWC
		
		-- declaring getWC and setWC channel for updating memory variables related to clocks
		channel setWC : setWC_identifierSet.Bool
		channel getWC : setWC_identifierSet.Bool
		
		-- Set of pairs capturing waiting condition processes and their alphabet.
		-- It includes the corresponding set of the defined operations.
		WCset(id__) = Union({
			{
			}
			})
		-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
		-- It includes the corresponding set of the defined operations.
		WCsync = Union({
			{||}
			})
		-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
		-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
		WCresets = Union({
			{| | x <- SIDS |}
			})
		-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
		WCsets = Union({
			{|setWC|}
			})
		
		
		
		-- Clocks process
		Clocks(id__) = || (alpha, P) : WCset(id__) @ [alpha] wbisim(P)
		
	}	
		-- collects all clockResets
		ClockResets = {|clockReset|}
		
		-- With no internal events visible
		
		D__(id__) = (AUX(id__) \ Union({internal_events,ClockResets,{|terminate|}}))
		
		O__(id__) = D__(id__)
		
		-- With enter/entered/exit/exited events visible
		FVS__(id__) = (AUX(id__) \ union(ClockResets,{|terminate|}))
		
		-- With enterV/enteredV/exitV/exitedV events visible
		VS__(id__) = ShowV((AUX(id__) \ union(ClockResets,{|terminate|})))
		
		-- With clock resets visible
		FVS_C__(id__) = AUX(id__)\{|terminate|}
	
endmodule
